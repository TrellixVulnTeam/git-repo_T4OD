#!/usr/bin/env python
# -*- coding:utf-8 -*-
#
# Copyright (C) 2008 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Repo launcher.

This is a standalone tool that people may copy to anywhere in their system.
It is used to get an initial repo client checkout, and after that it runs the
copy of repo in the checkout.
"""

from __future__ import print_function

import datetime
import os
import platform
import shlex
import subprocess
import sys


# These should never be newer than the main.py version since this needs to be a
# bit more flexible with older systems.  See that file for more details on the
# versions we select.
MIN_PYTHON_VERSION_SOFT = (3, 6)
MIN_PYTHON_VERSION_HARD = (3, 5)


# Keep basic logic in sync with repo_trace.py.
class Trace(object):
  """Trace helper logic."""

  REPO_TRACE = 'REPO_TRACE'

  def __init__(self):
    self.set(os.environ.get(self.REPO_TRACE) == '1')

  def set(self, value):
    self.enabled = bool(value)

  def print(self, *args, **kwargs):
    if self.enabled:
      print(*args, **kwargs)


trace = Trace()


def exec_command(cmd):
  """Execute |cmd| or return None on failure."""
  trace.print(':', ' '.join(cmd))
  try:
    if platform.system() == 'Windows':
      ret = subprocess.call(cmd)
      sys.exit(ret)
    else:
      os.execvp(cmd[0], cmd)
  except Exception:
    pass


def check_python_version():
  """Make sure the active Python version is recent enough."""
  def reexec(prog):
    exec_command([prog] + sys.argv)

  ver = sys.version_info
  major = ver.major
  minor = ver.minor

  # Abort on very old Python 2 versions.
  if (major, minor) < (2, 7):
    print('repo: error: Your Python version is too old. '
          'Please use Python {}.{} or newer instead.'.format(
              *MIN_PYTHON_VERSION_SOFT), file=sys.stderr)
    sys.exit(1)

  # Try to re-exec the version specific Python 3 if needed.
  if (major, minor) < MIN_PYTHON_VERSION_SOFT:
    # Python makes releases ~once a year, so try our min version +10 to help
    # bridge the gap.  This is the fallback anyways so perf isn't critical.
    min_major, min_minor = MIN_PYTHON_VERSION_SOFT
    for inc in range(0, 10):
      reexec('python{}.{}'.format(min_major, min_minor + inc))

    # Fallback to older versions if possible.
    for inc in range(MIN_PYTHON_VERSION_SOFT[1] - MIN_PYTHON_VERSION_HARD[1], 0, -1):
      # Don't downgrade, and don't reexec ourselves (which would infinite loop).
      if (min_major, min_minor - inc) <= (major, minor):
        break
      reexec('python{}.{}'.format(min_major, min_minor - inc))

    # Try the generic Python 3 wrapper, but only if it's new enough.  If it
    # isn't, we want to just give up below and make the user resolve things.
    try:
      proc = subprocess.Popen(
          ['python3', '-c', 'import sys; '
           'print(sys.version_info.major, sys.version_info.minor)'],
          stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      (output, _) = proc.communicate()
      python3_ver = tuple(int(x) for x in output.decode('utf-8').split())
    except (OSError, subprocess.CalledProcessError):
      python3_ver = None

    # If the python3 version looks like it's new enough, give it a try.
    if (python3_ver and python3_ver >= MIN_PYTHON_VERSION_HARD
        and python3_ver != (major, minor)):
      reexec('python3')

    # We're still here, so diagnose things for the user.
    if major < 3:
      print('repo: error: Python 2 is no longer supported; '
            'Please upgrade to Python {}.{}+.'.format(*MIN_PYTHON_VERSION_HARD),
            file=sys.stderr)
      sys.exit(1)
    elif (major, minor) < MIN_PYTHON_VERSION_HARD:
      print('repo: error: Python 3 version is too old; '
            'Please use Python {}.{} or newer.'.format(*MIN_PYTHON_VERSION_HARD),
            file=sys.stderr)
      sys.exit(1)


if __name__ == '__main__':
  check_python_version()


# repo default configuration
#
REPO_URL = os.environ.get('REPO_URL', None)
if not REPO_URL:
  REPO_URL = 'https://github.com/lipro-yocto/git-repo'
REPO_REV = os.environ.get('REPO_REV')
if not REPO_REV:
  REPO_REV = 'lpn-launcher'

# increment this whenever we make important changes to this script
VERSION = (2, 12, 2, 2021, 2, 20)

# increment this if the MAINTAINER_KEYS block is modified
KEYRING_VERSION = (2, 3, 2021, 2, 20)

# Each individual key entry is created by using:
# gpg --armor --export keyid
MAINTAINER_KEYS = """

     Stephan Linz <linz@li-pro.net>
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
MAX+g8SaxKQOlWhnSKnwkttYm9B/aphoM2qnHbJ6ZcXjpYItj1Y86ShL4+zDbYTI
igfsgrydtSUZrhDP2mrUcaGPJyq4VPi/n+U0X8hjF+FoXyENNbJib2hOk87Kyyjl
QCiafOq7lB/46/+cs/+mfovfBIbX038BHWj05yXani5cnXD2xYkCHAQQAQIABgUC
UyX1bgAKCRCzcLwcguheZq4pD/46NZQpL994aQA3Ufzl6ez9T16tIgKZkOWZMZ1v
xzyHsjZoCa9wWv17+FqSI91WfVqOgPePKk4mE7AeMm6Ncz+gG54JrIxyXDU5Izo3
jK1o2zTyo97WEG2x3SgftuXus3Ef6zlftsJKOYGwPS4D0jYDjs7t4PFkeVHaMjDI
61Bwmeu9nGDfV8VFr4bUqqF1AuhoJ3WQFGwyswRDQjqhhMO0kItilF60zw92aIvK
F0rQ+RvSkei9suZjqz9Z8r29d0yBfPtdEVluepUxHWrjh1atO/KuFN/xeYdKPt6b
BWMvPyDx1exc+vavFfd0rFqxf5aNN1S2bAVm1xF4rOSCwrUbjDAjYTXjkoh6gPOk
OitUge/v3t5Yegbj6HM38AI7JKVngq/HKkj3FJhS8baI+U1IEtcyc0XirAOqvpvs
cwKFnNoZXWw1gdcUdwGt+vidw4iHZ7fmRLmoEmoObIXQSmFFTwkk6jnWGky/N6xY
J3XGOdCwPxk0ciNmRaeXTiYuL1nDFyuwYJzk4nY4MG+rCaaqt/NYd3QtGtf3Y5XA
Qx+GFTlCwbNSV/L1+Qv6SNK23TI4HFoRAggtpvUglCIqt46ArP53oqaYxcmUPxFo
RqmF3/sGdBdob2ymyznLSGikCYM1eSpeDY+6Pa73TXZNuEntBP9kyG1l2lZzWCWv
3+oHWokCHAQQAQIABgUCUyZOdgAKCRCVhDwX/WNri7ZdEACoBowCJaeFzC5NBZtd
A5yOso0QibjDKKJl1DOsFjB23vsJIb/qF5LJ5uKpkuN6YyvJEPLK4fky4epjXCt9
SyAVgscO8UsynzjIZAQdcO4OvyedGCVyC/w5M4cDrjcNSeEMaBjOpAPf8HlGVdpA
528Q94LjnEAB6uoHTi9x5rrB37IvPCF6NONNowwbLKYea3qQ0xvhfXQjZMwxNo2X
W5vhSgYzxVE4vXiTGFi33gx7HQ9kd22wLvNBJTXvMZQ8d61QrE17ilCQJ9rf743F
pIfcAzvvVyXghQXaFzkCc+oMx4KP+gbl25I+6VjBD+3hV6Ce5GLbrVWnsgWPHQW7
mqwxqwioqWWCBVyPPTPLVMS+mVh4yon/zn7SmIBLj5KSbNzHNMwRGV9EvcEytu1b
/sTKP1mZALXDA1yKegXP32z03cOm56Xo1gdLg7P8zUSrcsjJYA150VImrDsz9orI
bvDkCDvDVR0LE5AUcodfMre1mt2hDClxVmlY8FhcXXd9cD5ofipU4rcZna3nHrpV
uYMp1SvGrnCAHQSPkBQb7bmTTKT+Dr0lzgrLOluwgKoxkk+dQ9QEpihDcolkVb+a
rVoXoQvIRyviyYSsoKjKtylp66lyTsGEWKg4U9Pkoc75enVLyEyQ5sEqyZmIXZSi
YRtE819PTsvuffaBUi9TPZwh04kCHAQQAQIABgUCUycFeQAKCRCaNYurBKTtJ0L6
EAC5umIZFdq0jIeR13Z7V+FCpEIXihJeIzoOJjZj5uSIErpegSd6lylK6rYATbbT
vbSt7yRlm6+v5kEUOTN4ao+ssS/LIhJL7lZ1NlTdlCYp41pRKACzCk8UYIJFB1g/
CbMoJKDkaaNK6c+RDFnlHphf1rdrVkLPzHp3V1MeycR3vElVymcWtGKsVz5jqex3
9ZbF4RnnRmhMwySDZnoGFOcT2bkGIXZ5V84iR4nYLsJwN8ohxh0rgZS5O5QBgW0l
7j55DJCT2I4Y+t5aNgNiAqpbHHi7MsHriAB7y2vfmfOhVjRUxcyJM+S1yMR0+Dpx
4rNErXVit95TKVPO2/B3kSA/Rm0LpeByGltaH1PzV5Ndcz93/CGuD7h56exmXICF
FMRMqGhwp8LxzQAzzQvs6oh7brgSeg1hxO0TI7f/pkfLPLSuJT77osBZlVyymt+x
QmO9bYMGIXBiwiJlFo1Kyjbdhxxc2f41TnOeulvSyq2QfmfGWEseKQzrERG8QYDi
b9hLSWWzAwdWOFfNDGAZW3dezDOnwxPBFZKb2Bw62mke4romYcdJHz96UFLdW/0a
oYXo9/dSqiZQp1PxsCDQAsqdmLa30e9NGR968lwlMsx+wfYQ5z26JQIwr5KqRM8X
pH+yvZSjf+oGJusTXnnH7uUqcD97IfnOiRgMh03msqML3YkCHAQQAQIABgUCUyca
qgAKCRAt+m1AOBWoRyAaD/sFa7dfbLsfb5roBUHgf1wIIYsT7PgZVy8LiIF4ia6r
4ZIgajd1txfa91Vo7BRY+WM1nAjOvqYZFRbDmCKem6bi+V1k4oj7E4aEmut2W/Xl
kGTcxJw+NAZk4q/o7VO+HuckDnqxDSvTttNQxB4n7OHg3Wr/TRkAMUFNjD4SXLd1
s/7UyCI59ZcRoIy0hx6mA24niSGqs3YJQhZD3V8LJyQAx/ASEhXXWJS482gZQ1x9
2cX+GA9jc/D3y/SWo9tbXGR5e2z4dz6QR7/avcPDeQi9nh54slbbXdmjsbpIpJy8
fDZ3h9SFQpjaSh8dUVlBt3riao/IHw3tCql8O0WKjjZPBuEbAWJXorFnVAHQfpsj
ltRYnysh/SO2v3xZILtXt0Of1NMWbVqKc/MucpqzqocSvIyXEGlOukO//H7euzNZ
MTVgeqMWkuIjFo7EyWyL4vHOTpdWVLyOn2tOMVbsLOTbm/cQ6PvUqXBrrQk8wI1g
99+VuA3BcqlDE9MAK+sMJqagERyFFP/8d76JYaQv9BoZonKVY684UDMSvzz+ZOYo
sGa7YafL5giSZdfO1qEBslDZTr9/R4jn/H+DurTo5TZGEvQJF6HlBATQmUFYa5gZ
wBNQhUjouqphhOxrpHdg1LKFXWpB1HThw/7cMlIHh7e6ARm1MY7kkiiZ8DydCfLA
J4kCHAQQAQIABgUCUyddpgAKCRDrEAFmP+Xa3rAQD/9zdIayUKcWDKzsUbUAxOjT
c1vXZnuLV0Hb4DJl/qLvPougvUZK5snEbj3JQVNYO7yENGDNfTBPsQQM8nRAKgKY
rOnZxqQecOOKiGnqUwNrtG866FJnW/8X39vhRywxQyBPyWxPzBLrcqwiSLzw/u7Q
ARnAFsiB/503UGjlkNDgZvyOJ6WcEIgv6HgQtKNSLj85y0Oc1ebXlQPr0ccKaTMD
pleDUxdSMuWubsdqgDVy3kT7nSy1n/bqmpblRC8Khhads8HP9BVIP2nr/DUxMuti
wDSRcrzUKK3h9k/uLjGByUW4kxzpqjpVAb+NYH1yVykN8kEw3KA0tU/waHGuJOEg
OlmqFC5h/gXdVmTvTcWF0Ambzv0u70IYOOC6XZOJHXg0p44v09ir5d1VgiNh+Sy7
02QJyJP9tLZOvagUlZpTyTSO57GBm9vVBop9c4YS2L6lR9WOdQbSGm0822bmf8bK
gaVQcCnsV/waV7akvM1eFkYunLmX56PpUcKNW5fat+Jf5rKzmyD60QfhW17O3fDS
O6XVJiDsrzdfcJmaxRTTMJBX+CibeoK3yez7xnTm7Js+hc85FuFKGPeuP0nuR1f5
z8lh8ZRr5n9vVReqIy00e4NBv7WSCky22/X1CFBAVEH6OtpqLQyMesbYIXao64tF
WCOEO8IT/LXczaSj308OIokCHAQQAQIABgUCUyddtwAKCRAMXMk3sEJFZoCjEACj
eYAM1bIhKQ2iMz7FQY2Wo74EO+r6SRYqEEynWatkpqII/cOClnMdru9v8hw8FXsh
CfF82jUdu9Uc5EqwcEZw65bNk6EBVmLLXSFh6wRiUOdpBYJr2MAGpdpEmVONqJx1
LGL6hHVC9KwfXqyQszYp1+jjinJPRtvObu0EL5k7Ew5nYmg1VudWNYU6mem4dN/v
UXAJdgYmHB4pQZIA0Ymb0GO+S04G094gxTWpKljJYqiGRFKKCpbJYqcvneOtqyZF
EVO/zUqh/MoBaSVyGnS9v+SuaQcHI+y9LG+7WSR44IeRdxvtwaHaZZI51XBdjcaH
0buN6lGHZsNrI10Wejk+JPMMnAPg41xNYUEpzJ5LSrxQTirgcNbdovYNI+5tDMg6
aanANdpqF5Wlf95pcrmowb0Z0AZQ9ovbBAW0P7zRNUVEsclICjFSak6S6ce7m1Ct
zZ/Z7j/JgnLWFfxagRky8Agnr2rtRyONF2lUm2VJzZKIKpO4/RjGa7owCt/NQkYb
AhfX4lPTB6QNZUS9Yl8UqsfLu1dQxnpemFnDFabW7WMiJDpI6UgOqTMo909hI544
0QjXBSnLbdgC7sEk+uv9cHuVrmvUiLMqH+0sRsYKn+PpJrkrutw2iQYjqrtzWntm
i7PwKwbH7OzbbjQfgsLpjjPPfYnr7nRXN9lzUdt+xokCHAQQAQIABgUCUyddwQAK
CRCpkcQqteewiGJaD/95VMmJttGEQQ3idNYp9fQ1EC5RQ5GgONx8FseZz5IsDRtg
LFQJtmCO4lx7M7a493wLAbIvd+e4TUs052JZ+2+6I0hP8U3fGOQQKrP9yNxjM9+5
T9/+mDOz0xGV7OKTKibTCsCzLOS38oiSRR+NFVRsGONQolB/bgQt8OHztsB9Zn6N
ZW89XQ2hXl1yXxBTa4p/geui9DsY+d/esWiGrNTRD39ZKftkV3bJzu9/OAMVMnNG
XmvXRUXxzfCw6dt34VeTFLwrYZqBrDhlwwoxdxlQHvO79peWa7So7SqF4Rw6pCrA
m6kzJqsqK6cW4wOXs+1jKgtdCaH4tLE5ET1EhBrvsm4bt/MAZqx8x4ARhVQfl7Dt
EiSuJaYYH2kWB3Ys317ZH7K/HeF42DXwbrEWsHD2cAiAoMOd97934kXoVmdhmHnq
N9a2Sd1qJoBYO/VhCHFHpuO7MHlXfDsP4xthMorKVfa/LXlIOjUfWzT4Y3VJL5i5
JdQx08JfHBbXOeZm4NJxW8dhqLMSoPDNq3Zvs+0mZXt/0OO5rpW3M93STxly3Hbv
PLaIw1SmnUpjR8SgvWDW4O+riFPlSf5ef8IRWRBcAOxSEe+8mMX0/AVtVcpGmYyO
VlS8GU+7mE+QuNYkTilaUKjWb0Mh7u+znf2P2PzhSptnOgmrJPvn22TEJWwqMIkC
HAQQAQIABgUCUyf/cAAKCRD1Sz3LMpqaytB/D/9wNL375gC+5Yed3BXhMlwDNX60
oXoaZ4xG17O4MdMGzfWCH5BZprqaH+esQ+XxIg5DMwC3jlgIhq5ITILbwDU+XCtl
9/oGWw2DUR7N2U5oLfIEwEoI+UMLJcdjeT1woo7AjdItodSMZfW+quClgUjI994b
mX7ZqvwkzdGSvT/kLG/3vzdJXaKLn8YsmzMwAF5saAFNQR5ER1OcFNi5v0EjMjg3
ZnheB1zTpoEkmwuojqX8Vq0gQmbDhOigAputT+j01i+LlLijlCZld5k5t1jBYb/e
75jthn6yAVMBW0LvFz8kZ1OCLc9vN0VvkaSLIAWc+Y24B6NPznbMd8wNfMeEqxim
Ut1tysliNJ7ylhPOnu3hh+Ya3yLW8l6cr8Fm/y0p7RQQbtMxuw+CMoOmOrfeODAm
4mWSs5wz9P7YOj/DBIcCr5sw6YSOa8hIlhMaDJ5mw8nQPFARHFi23/QYvL2AmFgu
Dwgp+j6LocQGj+afW7xcpZPO68GCvKJzLNpV6URuVN/1t2UOvJc0+vO5CmbWLJs1
SPdlGIpGG5QsB+D9iQv7eSHDmAPRx0z3lqKhQ7cTJ5IuAt5XN8l86BdoMQdjwl1s
87LWcyfHdgcWH97QBPWSpewjgryD17ScGwnK8QVQNdBDYp5/jVRn5a+aTdYf28qg
eY3NIw2j0Ur+N5kCPIkCHAQQAQIABgUCUyxt1wAKCRB2A7aeDrNt+gLGD/9TfHyY
5VRU904pC8wb2I+Ft5cBSZL79H9V/HJtZcGaQ0zBl19mcBNQUlUm4QEAQyi7PSuw
iBhW//+W8l+5i3Ak9uu3laTfz/LcbT8GuuUIwonoJQMN0gd7+zP5e/VLSxN1VW3v
DvRJIxjyfRMiMmRI+e0orrxRDWdviOsslfurb01aWT92KXXCJtTuHBDaj5a3eZOn
wBLsYcodaSIpW51sb8HimrYVPxyi1YtbIR4x8A1suKX/TBucnOaZhQ+g5xKxTobi
0dGbLRhah+a6b9C1a2sNBaWh8QiWCoe4EWhMJJ1mKjTnEjmkUANbAJBwtpeFwev/
1snpTr1SmnXztVdoMzgvY5yT2P8H8XSII4k65lhdbIhXgDuJx2HsKMB5IM8UIepD
ger/yXqJcREG+9CDi4ipjwp7dyWdCmVW0LLf4JUCpvRKAd4yFd97wz6MK26Hbacl
K+dsqoJ4RcnYrlMbM1hOZrcbgSn5MDEZQ3TrVFDH5X+Oh9RwRQ8wpG4mF8MMVh7s
/K+hC4MLw36WJNSeBBc38E2qf/vN9TRe1N2bkYly9zjskzXAFRxzn2JuMxNFZj25
x2foN1xIGVGhLZbCxUTJKCPEMZPQHnOxeTomJyOoM2J4pHzbxTq0foEPohdOgnkc
ZEPyVIzwctawt0P4l/a7dG7QbcdeOEBzbRJ3rokCHAQQAQIABgUCUy6oxQAKCRAq
8qNEk3YR/qW0EACpL8eJeovDgAqeYFdKBQgvHOb967X40LqF20/sacWTVb9rUs84
2xRGqZWqi62C5fSDS+mf2VFK8Kozx9SoarnS3AFbddb7eMM5PNKpZTDhULQD7/e0
9hws9akwX/pUr7KSncjN4g8kl1gLIeh50kgyLEoFCbukku28vPLdd6kKsBKYqsFX
oQfrElVHYDihMEhgKLi1OLsVFdU1PMag8yBhHZnnMXv4FOkBUrdvs+Bis0aOg/ti
F1zZMv0l4O4OIG8IuDfynMa00IjKuXwLnDXBus87HbLJOGSrkMYuk2HRFq26h/r/
FuCJKuDurDW47MEKu4k7oN+QFh7FePFWnnJc5+jCKOIiSjxtPFScS8lHZOw2oXK2
tNSWi3X757PR9EluVDrwMK8fUdzJ2EGfMGG+5LGSG+y6c518wm/cqiiOe8hHb7G4
eAZcPDSP2pTG6I4BNj0gq2GO/GCyi18GMjlPz8HHmxhTjhAp13XMWuT4Zz2UGcnI
VfV2pYqlwF1uqxATW684WdCFpOtRH7aWE8WYkg9hf7VPj0eVk77bdy+snH+Mmwqb
s8nahWUtuDdQSdyYxNA6ZTE/RLcpRqKDcQNQYqRrb3TLCug6mLf/121M+Ls1NPuM
fY2jO3WHKc4brXtJ6K3KQpI4e6vJ9amsxcoVOzzutUjUKeuQGW7Y+0sZE4kCHAQQ
AQIABgUCUy8jGwAKCRBMFTpmvpVi4cRoEACtzZ1R3rzGVtd6gS80HTSzBsawDBvx
vG9uasqdeJZNol53XylCi69IWNVNswlX/0a313ZrCTPRyUup0ZEMJBPUWCIY/ujF
tVlXC2SXlVHLJJaq8Zz7xakGtgPpj/Knt0veP4PNhuGHg+jfNqZg2bu2Oi1ouUTL
rDlk3PCB/hp0W3CxcLepqk1d7fE3tilwYqVWibsTuJtxke+ucwsK2aB3IB+lhQxx
8My9Ny5c/x685vGJt1JUnBXzvLI3TL7ekzdO/IN0e2XnvOu/JNymZY+c0MRqcXU6
EVZNJO+/0QkSIfOTTyXyJZ/x86iAlCM24M3aqm33Ixif3xoSV5KxzZck4/d+xegg
bXXtUvUD0JgdjP45U3kGngBzFRPLUmk4sl9fXUEW1kSH/4N8U9pg6jUSj9VhDgJ/
/jemtrDa9aiIExHoaDx3Q0/1aUm1ysxysj5D3KLrjcmVDKxOiTIfBRirrQqmZMvb
H0qroX13CXbPc9i8tcPihIeMI+FO25IkAf8IeBhnZ1SJsUsCSkDGJ2rKRQt8mE7c
RuGAu0dJROYaP+rXcE8OYRUqFjvEhz2jUn8It7wmF63iDG5CUIJ9kFZbO+iqnk9Z
b/fVJtGKWm3LDa/y7m72uwTaW/e5tfm0DUonhzlWbcq2X1ygHcYve8A9bxtEYTQV
vswpbz49aatMhIkCHAQQAQgABgUCUyWDiQAKCRAZmmT637UA/58JD/9Q+8+fc72G
Rd9NztZ8PkOs1Zt+lDokwEMwEMPQyRAGULlcT2fxVRhiB0JzIctsoxqTWmeEfsHe
U3BF+TlrC3Xqdgbz8gsXw+0oVhIsiVU1ply8qhwwxqUHALFAPCZPx94aTEWE4aFI
UNs+Vgmn0P3RBUru/NeX4hE0XdY0oq2fDUYKIvgtmBDbW23rDe0FhjXH+Uqc+qxy
eUIGVDDkaCwI09FzR+nuHJaXYhxrG+a3/vZ4fhyyoDmOHPub0d2icPBwd+H0lcsU
sH448fV9PLu9fa/vivSe3PM/vPUc3a7XtBxxIKtlUVi/41LzZ6fH/5avMx2kN4en
k9u5sIfCReKJoX6yfOmwEQgyuzRG97S3GeAk6O3u6Zag2YmIyDIgdANWF9K4xgu8
vywMw00Os5Qos4aSVF+hIA5RAdWHJ2y5y6V4Q4zC5kZdW8zKymks3xKvYvxueoiS
LQowQmf5Gka9pbfenyeFU/1C3d997oWsW5kYE8o/JGwHtzPOVwQn1qyutPppfD5Q
bY0b76o2o44S0fST2HetLrRQDYZA0pG+tQkGNqx+agAnsOaL37WDpEepuL9Y/3iz
cxDLgUe/Y3NposCOZJZC5kqhOkWMB7uo9Rmb9fZbuWGpUe+qLWt8/SwpoWMBW6xy
b2h0oLB5VOxK8BKoBMUnnQgr+2I5rL2+JIkCHAQQAQgABgUCUyYhCwAKCRBls/CU
6j5NYR6tD/47oSrbZJgekqUh3/mUZhDxDUKivwcxqkzvAkQem/8JkkkjtwPMAhuW
cQOhCNxs9ooWan8U1CErEXCeg4VuIdQfV+KBDApSGCO5mtPQuyJUeRKjxS28T3z6
hsQ6DragLDgL6LxzaLyY3wIR1gIpl5XdzR+8U+ycep1D6qnlUWAFw3ujJ8+QG+6x
8Tv1u834KXoTBpo+jmcAHGRMflftSA0baLMI2fZqyZ9Lrv2YFgvBxe1upp78bHaJ
K9BGthD92KzuiV5lyFXG8uZp8GFXzCztpSN9NobadERi7ZjPyW5vyjkZd6NvDjgX
uFttAenx2+y1nD+NdP7agUM74O9oxRIk8U4X0XaGy3sSqlxYfj4IKTtBiXhxskv1
h7HuE8eahr2+ozPEKU/ogFGS9IkLHoqFejUa/B3sr2Du/EaL59jstP6/1afe+xuD
YPyE0e09XnUSrk5OSoUsWG4kk0V13SaHcpezZccwP5N29tm1tWFw2wmyx+mWvzCx
08dOOZtRHuBi4e0jpx537oRG0qkppxFthMign0nW+ghJ/y0NPQaGTDu2Gya1pRIx
os7ESxZUZxUACCUb83KnFmh1nkaZB2Um/P2jBp2iV1rymaz3Okp52DpGf8vebpKx
tyaPIHQmtM+3TX0vVqy38hrCwmHx2SoGPsoRDSxP/y9/AVOqZsPRTYkCHAQQAQoA
BgUCUyYNqQAKCRCnPgBVVY+43TNHD/9pX37ZfOWyZebJOqtfyyxCUHb/2rgCm3pC
D7NHpJWNuZmk+hdSvJfuTV9xdf/GZH3p0LqjKK04kuZddHjFz+M09IuyOuNqXJqx
mIN+OYstRW1xIr/HtEzR0tOBJ0JGTK/ZK5E26HMGHMgQcDjIM3qqNnUcKbXlER3t
j/s18aamN+2Lw5RNPpZsC8SQKV0zCNbINg/eCelxJhUut4NBjRZjQg9WB7st46K6
Mu6i5wZC2EWRfvu/ngdIqnExhBNNEpDqZ9Jl1BVLbxpBLbt6tEi8kPQi2hjMBVTq
zs7eLpd6gl/zV4C6mwRkUDMVNTW5MXDratjYbOle6Ej6U+hg7Svn3HE9z1X2oSjC
1S7kJDKVwDxyNj6M56/HWg2Sn4hUFNGMpyal7EXYOXauugo5KGHanR+tuR9208AY
HzJv2leQhw5ZgC3O4En4kuYqFl1t9W03COmvaIdRBwxAcrGeo0/RQ2SdyGosJXXn
LwlYNLmCPdf71xOpFKMSODh0twKZ0nsMvf7QF9+Sn7N2+OyUA+2o7J73KRnL//sZ
4+8LYqSMAqUj/SUA/BTqTZuVXN4UszZksfirWU/TcE3F9DxkdrxbyxW1DCWiRJLN
UE39tQnUUJ0dba8URXPSvYtRz8d9vEfOIEmKTmTVireyaDDD4VpFQXYgqBf6bU9Y
iozB9Z+TTIkCHAQQAQoABgUCUyc70wAKCRBfYxEdNpZQV971D/42KYikojjXBjAO
t6xGxQlf59xqkSbpVvP0Mqu6t/83moVSypgGAn0iVtBgKj791wiC7GaUih9np55+
wYlr4nlgIqBVaFwrbep9lJhMwDeaOv8nCD9b9qwiyUA6YwuW8ftapmHw3G8xP2Jv
qEHpsglQzyGOl0Kc1sqZioEi1VXt02/x0KSGAiTSlZpHoLpzeCtuz0M/aQ1TvR9U
Q2y9RUqAxkoJDqU7tAiWtJHHGauOEFx7rgfYv0PjlliK9Yuuoi/JKEUiZcqj+1Oo
VD0Mnx2p/X7inhENuezAxh4psNhnbWATyDdkj7WTiJvLlG1YkkgwMD7BP/iaHQKk
4wNT05pTlbRBHaOWaIsP/7q6IRB9odo5MVQjlC5Vrfk528VIryYIOq0vihbCUqpn
amattHFKeq9HVY5cRae0KEGp7GE51GQMaBsPYZrYOgWTHW2iuiIgBRvrll35O/s8
XUIMjeAtk91HrUIcZrQ3qZqlRrPgZmBFSIicy9p8zZ8FWUNPWkNvlyELzEDvbQVP
/HnORmZ4UKIaNkBja0qxPc/R9eBSaqJXPdK6q3gUMzWh1QXF2YGMSpwjhHUYJPB2
Q2cXSA/1fQs4UXyo/bLs99mPeWW/hvlm9A9s2cCX+4lBB85e0IiQrMXdqazf1uhv
3pMFLz0in/EzugRSq1UZm9FIQun1CokCHAQRAQoABgUCUyc1AAAKCRAFzM+Hrl/H
EmdYD/0a9yw37U19k5h4SQrR0cY2Ro4IqTIRXS69ZoAN8/PSjfCkKFmceNCg8SJx
ctabYxuxPJ0FjTC6v9amm/oYk8kV/5B2HJB3mcX68CFAjcCwlx36CmSsTou0mWIa
n0bxd4BSLowYgoY37pHRmO5SS/N9i5kLU7C1KtKhcUvwLUu6bxBUmM2gXgwjSLxA
Zz7OGaYC6c/f9YzUGY165LPlPXCP3rMwQLktkTGn0RFl8OgjId7Sx58kmPBkWTcM
QC2n3FWAske7IkZRmu3Txw6lJ54k4C4oq36uRZ6DUwX4X9UjNv+jRNQbNIKqLp7f
e/vmy+P+s86YlTMZx+W2IqDHWHRVQYHEKZs/a9tGEfHYQ/2haqgnHrZzy9+TsYmS
WiHfCfdP709ilDj7UYjEPlAA0yMa0bJKMs1JGlVGnnzt+lwKm31WtMUCLcHCrTuF
s62eCgYYRVvvsXvY0jlxAy+hW0lIUfUyKvhe6MsF5OloTZX2Kio0ANEV1evy1ktG
ypjpEBKjgNDuNgaR45oHCrgX3Z+GgmBP2yxU8/LTgotaJDRLuY2kAT6l2GRbiuUq
Xn7CCq1SMmBsO8lntjDvsjS/XF6YIm4Ycz8DAyVn+hNOLL9N3WvwjkBBW6MJAGYr
2EYzZa91cdWi2a7d73DUXuorWDM72JRo1QUrJPKZb56clLbOZIkCHAQTAQIABgUC
UyScXQAKCRC0VD3N5Fi/c00DEADD31Nhee7aTS1AawEnoNd368su237OmU4itEBM
lt/meYMBi0cJfW73ZE8rgzy7LgotDl2UYL/To/zaE52v3IsyfSIpphdNTB0es6gj
woNaEFC/Q3uCEcLo+ryjAxj2PZrJHmBkvnwn5eI/Ob2qIlSMBKrcSOt1HK/Ilh0p
6WPffGRstgtjB7RFOthxXEVfn9nCBitYmpsfVKYuXOgK5jKSMY9FxM1BSHor8p2R
OYVroUw7hYH5xbh7sizQ10yY3CGp0ENgil0pMSUmWFa94ss+exdLBYrq/+TqG875
dVxq0iGQUhkMY67VtAv3Bj0hDG4Fb8Nw6rSRA5NmBevyW/yhVuwild0qgM379Je+
2XscJxs5BvHycyXMaepTAom/0zkbBzSpkNxi1HbZcpHDCdppQeSogguyPP6ICLA7
gSjCRNzEvMHwigYPjcnw2Dxr+0J0gVF+t1hVfASK+pB9CIhREm2d8pSpR6CKZncy
TeybU9F736lEEJxZlIdgO7tvMlaIeQN2yuxJbL8XshzK2FDLr+rkIQJ0FfPoBNLa
qZeaNZHvlL5uBSnt0ovhfm8GX+ntvb9t2kBVEouod2rGQIEEhWiRUPh8FyfKEjYO
GU+7RPjce2EAGJzsa+8LNLaNCmZ4QRlUKFnwvAEOat5IUQ/q9CH6aNJdKLUsiRym
K8UkG4kCHAQTAQIABgUCUyshXQAKCRCWqInM3weJ17cKD/9NNzi4NIPb+yJ96o7X
A6ACqrEFnSMNJJIch+ARDZuOE1XIaDQSbMn77jJbKdw+ZBGZ14jTtYCRQiSzYzzs
UMGyBjtbKrYgnD5l5KtNQmMwGF5SdDgFa2izls5PBHuyVckpQCHuigEm2Ik11qfV
YUaNfdikvtV+3z0QP6/v8hUgCEYn65OmHpfgQvUfIg88Fr7VjX/kvFjmccVJmiBZ
9joHdZgvwm24LdJNI3jspC3tWRpny+GjF9Ec2Q3Hs+QLRB6VWTfaGcB4qBjZWgRM
Ljp/6qEwYz0NWHecJtZcimDDFDVvVYSXlyzTB5w4RgQFXIGob3tZWuDzvp2qYB4H
FMQuTARWuRl67KlFaadfCWCKPWEobzwjdfdrHVBOmAe0pkLRJxOPuC6HYiutHdRh
1hgZyeDjjoqTYodC3nbpGv1NC04KcN+NiYhAiE7vbzccLtKqcLFckQq4s0HKts4N
uv1mVbB4+9E1hQFwnuIAybaRaNWBJomjtpk2TnDlhBkXvbBd87yJduz0JnOXEzyU
uHvS2ERCSsKRgfQO9ZpOFgEfpLnPHdRwtxCxOkG60LGebbKFnsq0NGafVPZn9nWs
B4qNQP/OixMoreVvSQ0yH54Aet12fPGc9zCx+ZXFAK1RBYm5QQmaL+1IJMqYPrFz
Pn2d0V5uFChJ88/JY6zwHmnDKIkCHAQTAQIABgUCUy3F2QAKCRBNxeIoCjJ3VEM1
EACeRZJ0272XX7cTGUn5UPERS6IXqJsOu8+ERZS8BScsddtxeM8FtfgSpOmo5hJ1
yJO73YjhiVJsTrYtyOdP3KKmJaSkGwntZWJ/CNQoRu6JuTQAkJhR1QVaVlOsMxLs
mRyFKN8OZvKOup1iiWD6zHmJuGhaY3fhgyMvH3qres8z5x3UWVmYaDr94AF/EqSz
a87FwEHuRJXx7PLLVKQsoQ+91SSLkMuxYcGzxj8Z23H5Ab66iRBl+5rTbRHF5Cze
Xh8A3MXExpfz897H/qzk9nvjOhkK4Qx5rU+zSCm16vFD5OYztSlzFYuyVrps2rOO
56r5oNOg5lpCixqDspzXXPypTtycvpK1zAb9A+ylUgQn/KMoteXk2gFqnYuw1RlV
8o6I3zp5mJCzTfD2c2mlTAcd9eq9AMdcGpkF0n0cm9Z7RGyvo/2XtfmIy+3AOXyM
2prEsIrKbV/llVPVPiRAPXudOv2UiFIoNa2Cq73dJzbchdABs3GWZljKyRBV10Jh
gL7oIq8MRhmb+YO0mMhlRKVmGQeL9T1TCeEXuh8vL1BuqTMpOS1s17QPgYCW1ZPz
rM4rTwyuaJ69R7Zc6na861hVeNyf4DNJu5uHiUCOFkO5okoIxJyPeIgn49urKoWe
x7qsx6fQc2l71rPO/RCY9tw60obDBaJxOUaWprxbQuV1WokCHAQTAQIABgUCVQ8Q
mgAKCRCHkkGlAqaYCtH6EADw06/1vhrE4i5Ed3Skk4fXXFUMRxkD01Jb+/D+KRKS
49CNSjHSTZdJpk+mj2LKfLVwLMXnTTZGrH0zBRcNgH+GGF9MP1Azqh7DbfpCFFW+
CXKgdy1YULvJGDc6GiUy0uihrC06ODznesa3EKsxnGQydtxfnqq2ANpO2PnlPpIk
hUYt9R7LoxVBoEIXB4pSrJ4/+ZiCLDTz0fbp4KPDLfePp90jRaQoD6F0KtPjCVKw
c2YQEXuSiDOnyEH/HZvDD/uD/b1eH1FEHwm/K+du7ty5rtQ/4p/VA3X5qwfZM+WM
IGA/fX+N2Tbkr+FfaeWWvRcJONnb15K30pvIdycp7ptjz1FarFavvr1kxgoSWAw9
kGyIMBcZDSPmDVPR+BSXUdgPcy33cUqgVY7469sczi6qS9huGYSWJm/XKHEs8ZWp
4EWwRK9+lHuP7P8rUMbN9jIRe80cBZUCnVCxxRtDifaEmMIAnTlAlazSJfhw49yG
TsVN75Mow7KnZx973EBt6j+n3YL9gDZY71Nr0o0kx9OAombrvQo7Qi8ulsjumkM+
j3I1MzloC0fzyUqFFTaLpS+yrnICTsJ/EhNq3sbDt1/N9d+IO/6OqFNxWwFsr2rm
uYroVzQB5uJxTGZ8ZvbkFX7f3RgK1y4Fpu9ujdnx/gNPioRGuglelpIa+qcA2Zbx
rYkCHAQTAQgABgUCUyW3qAAKCRCRDlzUdsyMyfQfD/93bQmdSqQvf52hhMCfemcD
qbW+9wGVhVbLdZitA9efJ+TvQZQFy0RwxRiPD/KIyd1xj/5ZFEXu+FXtWGv/Ylwx
7lbE+HeSbN5Qm+7e5SvpWlDGyMTa6K2Z0LmuG4a+uoWuybbhDocwXXoEndh4oqPY
y5wtRY3CBQKXTG+8y4B59PFSb0AjFmTGFxU+GdmzVDFb93nOViNuHyZG5U/O3LOM
EfhH35Cs72P2yg7lapW92WW6makDf9DHIAB/koybriYO5ytN9TyhJDep6MHiGbR6
OORxxklrRpXY2Rmia/ZqpmpTMHEZysSezkErTqGWc16cIrzh9QemcfOLXHAWUtsV
ebV+MwafAP5D4jtnrMF1i5i0lqJC+Q4T8yGZc9tQXfCDyo7q5XM1BfTA/yHbjvCA
Cv8EnnN4yOQVRfVEHVzbPR4PJBH9E+cK6zs1Tx/Xl9hfIY1Kl//h8rignRxaD6sI
NPgDcv4h/TExIYxn8kNDLWEt5LQgDKOC9hQeZgEnB1PxII3T4oG7BW3//c+LgxKY
fHBS9w93dANiVoEaCWF16NHqYKORqEKw08qt7wxjpBA2HP3wZPkIO9NK+uO9ijKB
H3YVAzr/K8nzA4dS+jLvEgHsuOG/t+59ZC5yVfbhHFqzQyGiyJg2fXsr9Kkf4MdO
ExjwVcvemCsotM47yk04c4kCHAQTAQoABgUCUyhUqAAKCRAFzM+Hrl/HEsgbD/98
3qxfUC21c4Qp/3KB4F+9xFlpWLtiPxtwlupFDnkuOJhGGtdcjMFc+C0awwpMfWO5
QSjDh9jKVcsicLmm2G3ynoFM91nBAv4gVppBm9ho2vy0Eww4+5e1W2zwgL20X00d
okfAMGsf4Itx0PGh28nm3CXhXWnvt5PlF58irYpFwxxJK8kk+B7Cdv2710biXUIB
ibpSnGNvFmAH5myPMNps9q44S4dB52P3UAgGpCZ7yDB1/O7FFVswycOKZwe2wRsi
aDtQlDEfirv6Yhnw7LxrMW50ICxwAswDP8QYVZtSoRMpnmtVbG+ye5Wypkc33VHs
fHM9pTtoka8gGx9wyKQSJHC0urSogPwHLIqMnH5ZBIPonfGslqcGKKzyA8hNjO9d
2pfyBzRJcEf6D0SwkENhZRA5WmnqUjjLukXzddJaJ4vwtOk+10SFviSMh47L79TE
3q0utFL0TqQ7/Jz2T/yasmQO9SFPDtE+HOJ3oGnnSHKVuJ+FrHVZBVh9iivU9oUN
+8fPHMwGV0GhziDsCiINjAVyivXrxgDrLKio9ONz5P9veu+ajeP06FukQIPJL8PE
6ypsu2rrK0p1zIMDo5Jk1p//nuhIhU183DfuOyoWH8ye9u682nAAPqZctL2ScsPH
URdikkGpIr2kyqn7q/aCGQ5btUqZy+6DP8KcE3LpMIkCHAQTAQoABgUCUymNDgAK
CRDjdyVHGYURZigPD/4yv07CD7+l6quvLcYTSOGfSPqrDhLHsUJLBNvzEjGat1fb
t8N1lHQsr9qpqaWiY2pFNuBL3lm3HUg0ibv166MZC0mlfVPpUK5peTsG+4icbq5m
BrSmqESf1fAXQXeunqYyksChdVyKsXFG6iCQ9oD5Hj+DRAdRKx3Wb25P2kD00Ec2
TRdgPgtYvzr2mxiDH06+MXdv0wMD2YDYgpgHLgdq/xuEv4ggua2GMAqcfQ/sIdmI
S9GTUX8o6K93SiDYQ4F/AXNMuUXtua65ezzEC+mlGqASoAIoxDEy5GXhHl2CyiWM
LuRwU4Gp3u2ykWlu9OiltLwEDfGRwqpXUVtw3XxV0mCxbeyuKemnhTyg2ojz7kgw
T4d12cqwonR0sJXh5ksRLVF/2OChwpHKoyR4yHLI7u4PfH0grQ26Tiw0vhYbLBME
JADVm1tDpO9xF5Kl1CIi2aeQVmpHKYIQRg6utFW5GfOyWJAmZBVB5BuUOm919fzC
n796lPPpfKWEXpnxQJ7L+zAO764ru8fb5ZS+1P9DlNWSdC1xeYN0C7dA/xKBRS/q
lLLcEXtxFIIjgppTdQCl+YLadmpHaPZfJ2F0Fh0xlojKujmOJTFcMGb7RawEfoeQ
kc6/JdFKAlFWWoOPdySUmOGArXZTbT3tglBwuwpOM+bkVP5dzminNgW+Mdw274kC
IAQQAQIACgUCUyc6IQMFAngACgkQe0r/97MeQzBN4RAAkXZCkab23215Xe66UgqP
2GFSnnmtYcvM+GHdBc6g5+eOokQr9rLYCDjapObYbYf7WMUuLii1P8UOTZ+IPgrZ
zNQsbFnHfRH3LXjlkvVq8C+dKXdniS7YUOm4ePmnoLA5C/unp3pCdScT7U47Od8M
bRe3/ewMPamdYkE34ikzP8unnbc/9tYr6+xEJ6CFhY2Ycgsu7ieCPknraZvpmRSQ
Uqt7HAwQwD55rNgrX2Qh2h6Bfj1tHOtGYwfFrRjtpURXrQvIlYUtN7si/Txn3ImT
QD+cvo6aYWQHEH0z95FeuKaiMsQ7K31qUthFT5goOLbl1iaftltk2bYZGduORrDo
IlQg/RlZN/YIAydvTjbsyugtPNsIE1rhLuoZobWuZFJ2SnK1tgYBSYM24UdV8iqe
N7co3Ci2TLJ6fBlQx4WHmF6ESzyc77NX1M1qngnQFVjil/KBXUdOHiJMAGWj2an3
RKsi7OgFX13oDP1Ch71BdjgkVjhnC1+1oFj1Es7N0VE32rob3lrYa2xmuZrPK4nt
knoB/DMFocXV+W7Ep2T5EVQ+6KnuBqQaUFM7XgO28ZhwaI//l52NP4o4Er5/BSpi
vOiN1wgk/XOuHmS1E72GgbR9wccnLamcztF/cx6wROHMZMiYd4n3CMLcfkXjzbMI
Cn8Cs1xG0wn8LEhTx+w7sOWJAjgEEwECACIFAlMeHkUCGwMGCwkIBwMCBhUIAgkK
CwQWAgMBAh4BAheAAAoJEFebNK/earQ5WbYQAIaQrcncj98y9KCzV44EO/oDUqI8
YvDH+TQTVJmZb+1KXYtCK/e6SWYd6jHBfx1bGQ/NWWFy5mhEzkSvIoT214NsdK+b
LsRDDT9/ukVXfAm59fKN1INhS7Miy5LzprCDl13zXMTsBNqLaHWPSk5EsjbOyagp
M1KaezC916hNBYSrDP532qn1WMrP/uKvDdz2FT4VfPiXFnFo4oqZBgE3ujK9YQ2A
ztRm0t+5Z+epLSYkmDmIdKlrKuPd4LnmOhOSOnyGVNFMFOKdFL8WAEKHSBPvlkTG
NTXh/E9+xpzQAUxwtCFUFBQqsL9+7YmUN30RzGqdN7Mo1oYk+JCy880upmReLbBw
Ut7YS5i34dSOfHQgOFifn6Dzr9JzPdHsbkgF4pI3PeyzLEgI419EQuBYpfpfRf6W
b9/9RMVxievt5WV62dupR2uO6N1lseaPkDmo0In8YRCk/GBabO1mVSLCfB9MHwX8
Q28vznA0kQVH2VIyrEigw+8rTs2gn/NmoPq1K7hGa7penMvTlhgmPczk6+zI0M8G
R0S04a/Z96L7RvuK579eh3hbuqZlWFeus9iD/R90+m+kE7M0HXvAh1PHOPk3F8Z/
FMFqksfKFe1YUBOt3z0vtXjZlJJ1wukUYaPAoJ7O27dmixNyKs4+uEoYTBNEAKgr
RfDpLjZnGxWSYd96iQI7BBMBAgAlAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIX
gAUCUx4fWgIZAQAKCRBXmzSv3mq0OUvCEACLHTMtu8Wk9CT7lSx0IbQQ/pe2fSxj
3M4xNg+iG/O1MQbw3+kviz30esXtm0fO3Zu0xtJ/VIIKDwXVP13m9UhxEpXgDO3J
C5srQ3WYnajg6RiK3pgOWpoY2yotrG4ka0P2IikHEg1sbUO7QOta3jb5wPbcCh/6
A1c4zzLoujwC0v1Po0zmxJlmoqceOXEvkFxbjYUU2nR3bRlPqBe+TbcCDI7k4Ior
ek7v0CIxQHvv8W/R49gyfR/EaQXU7hKDoEO8xrY11XCG8IHr0kiiY2Mk+aeQwx7V
UCeaugDKNLdIkVSwUPA37EDLgroJRIBMBCW3KZJemjqxVS6FitUFCOwMFw+Udl1N
p7BHJnQ7FAZwdA0AxMMGmKyHVfXeM/z5dcvXJBH4GXKx0PliR0/doHGEVTPxfnU5
1AxuSAUmJcHrx97ZShcHYW9i5y2/OfaMpnVNGh3IN+Pr8/wrO0pkWwdxrBRgqqvO
s3ghRtuFGrvN/s/N49MLtjkEZzpu9JqQPplwf5LwSk4jL4nirXVQLdMS32MqecaE
uPIcdokw09YrwS3vNdP3RZ+1oD0q9eg3aD1g190LO0QDjVyEbGIKgLUXViKJd1BE
Qy4y44gGatRgnk1v+tGP8W9A+zyeeQlhcxvUfdXEzsmEjZiXd4NimK0Sx0lTpCvS
aLuCmHhJO4PiAIkEsQQSAQIAmwUCVJh9aZQaaHR0cDovL3d3dy5qZW5zZXJhdC5k
ZS9maWxlcy9vcGVucGdwL0E0RkYyMjc5LWNlcnQtcG9saWN5LTIwMTMtMDUtMTcu
dHh0P3NoYTUxMnN1bT04Yzg1ODJmMjUyOTkyNGRkNjkyOTdiNzRjMzQwYTBhMjlh
MWMxZDc1YjE4MWJmZjYwMmZkZGQ3OWU3ZjA0OTY0AAoJEE4feZqk/yJ5WlYf/R8I
pTEqxUrKVWwQgjZNBbZiWRugDaeJsNCP3ssD6oh8e1rqFUfrSR4tWFCmrn4JjsK3
5Ee3tMr2n/vjEq0sl+8Dba5mOeOdOTr7A5x+y+F9MKQDKknfON5EJjaDuC+c0Yc6
+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
AgIDAwMDBAMDBAUIBQUEBAUKBwcGCAwKDAwLCgsLDQ4SEA0OEQ4LCxAWEBETFBUV
FQwPFxgWFBgSFBUU/9sAQwEDBAQFBAUJBQUJFA0LDRQUFBQUFBQUFBQUFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU/8AAEQgAlgBkAwEiAAIR
AQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMC
BAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJ
ChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3
eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS
09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAA
AAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEH
YXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVG
R0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKj
pKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX2
9/j5+v/aAAwDAQACEQMRAD8A8gSWW7jxNJwq4G01SW8WwD7UG4jbuIzT/tbw2EO1
cPIclj6Csq9vnihnZipUckkcChyOBQvofXOueP8AwoP2cNB0+817TYr+LUYHe3eZ
DIg3dSuc44b8q+Vvi78QdA1H4g3F7Z6nDdWyBFSWEZBwOcY968t+IfxGg1eyg0+x
0mzsY4JGf7asebqQnAwZDzjj7vT868wuL1mBPmKzv/eGTxWs5OasbU6Ki7s9j1j4
h2UssjxgSM3O9ScH0JFY1z8Q7a6QgnY7uQQxBAXjgdPevJ31JygzIdoI5UEYqvcX
Uk5+Vv3meW3cVzuF9zqSSPerL4pWjZiZFWJlDKQeWz/hgV6x8AfEFt4u8bwWNvq8
2lCUELLC22Rvp2FfHlhexJDtlQ+Yg++mAT7YA5rvfhB8SR8PvHGka69q9xDaShjC
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
/cYOAP9xxYw/hqVcrBcxzgpBmd52qXDMjm3Wib03EgRsQ7UtRYheBBARCAAGBQJT
Lh4gAAoJEB4LlfQYhgfmMEAA/jLhvuB6s9U8CSAvOOCQTLMJuy2V5BTGrtmePqP8
ZEfWAP955cru4zAUqiIfKgDirKlZ/jBtAPT7t53FEAnPPa9vOYhrBBARAgArBQJW
ZJHVBYMB4oUAHhpodHRwOi8vd3d3LmNhY2VydC5vcmcvY3BzLnBocAAKCRDSuw0B
ZdD9WGaiAJ9XmnB9j2YIUWF/c8eyEx68c2X6LwCfaiKknjF/e+XyiFrePbt2Ff4A
bfCIawQQEQIAKwUCWMMeegWDAeKFAB4aaHR0cDovL3d3dy5jYWNlcnQub3JnL2Nw
cy5waHAACgkQ0rsNAWXQ/Vg5GwCfdujy/OzaLdepFi1JIMsL483PEGQAn317Elvj
m8NohtI3f42i3n9mCIuIiQEcBBABAgAGBQJTJ0oHAAoJEKOY7Hs0x+2OBL0H/3Gl
FDspM6e2MeEfEY30qmyQ6dwNM+0LVK0ZyD1JpGeVTlL8kJtqHVjN28jQceZ/qvu8
Bs+NluYWJGqzq61CUK8Y9AgwKllCvS1mzCL/FlFi51DAmIl5bcRP87076Q2CL0ps
qoQbkC9bwLdRSAiKqtUmm5sdocSthLrIExjW6fpKhZ3OEbthJCH9/A4LMKwXyXNz
Cqetxuwig46Tfh1zj/aWJeJLiD9qkucgoRJXh2kQfLfYyNJOJ55Z+JrL1F/d+Q/J
5rdCQNjCxg5yD/0hZ3T+Iu+ul6q2KZRXC1SXmjH/IHjN+OFZfyBJp/1zVaL7QQCI
7gEeAkDxlfKwUm0WyeeJARwEEAECAAYFAlMsL8cACgkQZ5jb5/bi6wgn4ggAq8at
p2cxtXOPcv4VnW2DtFWMpnDGOaZpo0M167BDv6wAjY5ajZ4c8IRfcyYa4E4QOOxx
gt/mQoF9Wgj1EdWLZsM1rsTfo3UrbTlWkii9a9H7VTC6fXFby+a8iOjaGlaDkylr
oPFs2nIlmaqauR8tx2t/GzrLJBl/MXsVKEB0uwHK/2OtX47ZSscx3NAfPgToEvIK
XO7SFW9s7OfvvlyTuePFCJ2pkMAi8bbibKtk+iptvfafaLQiNIUXs00mubXyR0vx
25YKmwMI9gwsdRoC7qdilQRzukISt7/dV5tpeciGSK54rZ2DG4HmyClyPzFFR6yw
T5ehaW+jWBAwUowN4IkBHAQQAQIABgUCUy1+kgAKCRBRyDLL1gjc49gaCACQ/q3X
t0g3PE76mz3iGCDwhdKKdMXuakJ8ZvFD97c1dDZzU0KGMg4Vs4OKkaeFrTcMftj0
mhiE1GKHRXrMhmdxrxDcxBE1HR1HSgmTNYAjnyHyJADD230rmM4pE1RBw20rbqea
mbTeacXp4Vin+wYSIXJRNNsRI8/KGXHvN/aqTCH/5ciHy6MiJ+pC1fiZEzMI9nGD
xiqjs/3vDQZufvOmJv44BSCXLSzWT8co4R4NOssEjh/VFMPqUQjd6A+W+uPnPi4r
pK6mq4kz3U32gjkBlypOlJAN464wPG5XY4hfpvmXZ7l7mQ6jYXPh5JWh9fnSbF0L
HuccGN5i2N0unIIpiQEcBBABAgAGBQJTMaTvAAoJEAjPSQhzeWEP7eEIAK64dsW1
/HOLUA19T+g0W79nDhbkUv+Qw71DK1UxiMbOkuckIO87N0BMJ0Zlen8HirisdJZi
i0yDAHGqBiWVIf9q626hI4qs8yC/gMQzS4b3GeT/I6WKoIA/BJXWeFYOX5Mzyp7O
nTi+pC3ezB+27CS6m7UhRPwLb37gv/LFQnNlqy7TFNYdkVd3AqvPn9FG+9FoDFTK
8PKkVOUlHo/YoD+h79bmGkhRdmBqVGaPhO9Df46AIsulnOayibkUddnD9uqkfdd0
Ozfq+UEbVsVEHszgxeZ8EwuX74ySb5EBC8UIt69gIgMk1RL3KyO9h4GoJmiSqDoJ
b5VVm0gaJ5hhEiCJARwEEAECAAYFAlM1NyAACgkQ7fQbA4UXWJwJMAgAv5Zfej7V
5tAdvT+CzGXya9hrGTHNUX5aUz0Sxer0FcniSWO9XQ+JXO4v8ZabhWMMhMm0Wu1X
hGZjXjhaF7HEq+bKIYoHiWA0fIeUYu0W8jCuuH1aCWkQvkkdNWN1c2Zq6carDnsC
RBL/nUzQKDpm2wnzRdDNwP2rNI4oUW7kPoO6EPbIpCvd9QYCDxm4mGC7bqFb24Vj
LCj+3CjPwmL1yqKb881WIlVksxkOPrrOWr/grOaUTW05Gdo8AA1BI1vPkOv70n7w
uy3joijU6VccccbTBR3mHl+y7RdFN8jbSfLYkQRwL5mmOBR9cIKCiEyVejCzJ3R2
r+GwqffwZyEuNokCHAQQAQIABgUCUyVjVAAKCRDTkj4NuPB1B/m2EAC0c61FrIUW
Dvkjf1ySzmmI5wRrDNrGbiVCgga2eXzaHYjtrKp7xcJI448uNIMNO8caC99+RSrK
BITiO96tK6ZYfkL3lz/fWJ1JWUncABwg72KkwJWS5f9RTyWCdu/7jVIkQh2LNXKF
U2/wNCLT6AuIhPd1qngCvOp05drHkisMh5lMxrvJnhKqTm3Amw4loqjfoZOj3HdN
Bt2jD25eFIIJDS430DHASvAq93dnC0E1eMolGi9zd4ZoM/xXyvZgBELbbq+wzt5l
kztPb8PGJaekmpcLKkddNNZastF/1J8bQhueGjshj7ovYVTqUpGgNy2dyq6Kkf8o
FhZ/sT5WSHXcySG4zAn030xrmlCkyh9OG/iWQwLTwMpAPmZldbODTS3u1wRvHBEn
o82FDymXOJKLiYq4Yb+HGQGA8dYF583139i46XTB+gKWJeoCL5DnEQfzhZQXCW28
qL+7KzqAL2iV316TIJNApxZ8DADGOqER9+0IATvBug7Cno+mJXt5lRewsz4sQWkU
k98ZktrhKPTezgD4KMxZOgGPIFu4lkmlp0Sg7WjTEm5hkDu3v0MvYmPkysGidX4i
5oYD+zc2MjDdAxolsuP6qWZHkXc2IVUqcYO3Gn0r8gKSRboN5MprLmjiPSz6ZNAD
HVpOQsDhY4S3UDzT00Sf9TuJCJhqCQqmG4kCHAQQAQIABgUCUyXKxgAKCRDyJOTa
+eQnp6xSEACUKNIOPdB6FMyz71u4CTqkf5ZdSVqTG+0qsrXtdBdeJznnqj+2nV9L
iANOY9D4XktmtYVNnwUjdOQLHpI5RlWsu/GuLYxswd5yHcMaVRvkx5J5MX/839ge
/VQ4Z4MfJxsWb5IKnrbj0ejXTkPuqyYg6NkojzXeIoFQwV9weKV7UDXpSmawrX0t
tI3wCVrYztGcIpMpwjotskUlI0q60XGbElL63x45A+RYPD6RL/NU1fOa4sRMe2yo
0i1fAvyy542Dflw+5oNdShlrTwl9P1oAyUnfVj2BuuE2zXQOV6SeR1HszE289PRE
eRKeu8F/ez0uILyCeW/O2LJlcdAn0ZLHJrsTVbvOR3EqvS7l9HBRhplObuBOyDOA
E9S/9ijNb9Pq85P6sOKB8fwg+sUVPM8P+2zgE/FGvttT4aSeLx+NOF/PsJfQeiVK
dTb5IonIWLMq05550t4USkNl3OSxx46L/r7bDyZ3I19e+27+/35XSacG3Bipb2uz
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
naXPnMrABC1nm2AJ1fgsbJ0kt9lShTE6Gwx7lbcyqPAiyUfpSOfY42bPTWz8CsNz
A4Ja4d8EnsoNzogaBoc4eurvsw7eH9aH+EAYJCBlSQE7Vk30kuzFNyuotFFXeeks
+g1sE2QfIqXkIw26iHdFQ00+sf4HSLPjTmfx5WvhpRVRgPRnWWKYasaPyhZ1qxgN
tHF6zfm6nSqGa6JRISvfYPhSkPwRRlqPNSY7QU3FVRY8qZv7EbS6imDecdSXmvpY
t5HRCJ8uxIkbg+kkG/eRytKKgm5zkKY81OKHt4yw5ql4mLnXvIxF3T1uJC2mWS7+
YEgfoCvh9aWbBOK+nXen/Z4I8c7VZ/AdJWUkhjddrf6WeuxfxCVCxp2IqVESzBKK
wDDSKFE0nEX6BuyXpxIMEDYcSIYvYS7Z+hVqM3lUQxN5uTj5Hal5/Y6ZfQjNI9Xj
yWduEtO2l97wEAHJ7MdWs63mf3QoqUYM6lcFk/SSX3XPTOtCrWJaQs7z1ibcUSvP
gmb9zeNtrhMQ1nX7DROMlFajWVrBPONbMyNPmnpVoERJdfzx9wEUVzLcoLUgzSUQ
I1De5gWf08hcCoJP4AiDdnFoN4bk0j9/ldbjgW8mlTDKT/MerrzVxuHWgn6tyGA4
j6U0xa4Fh8taSZROnV/b9v1lsU0iiQSxBBIBAgCbBQJUmH1plBpodHRwOi8vd3d3
LmplbnNlcmF0LmRlL2ZpbGVzL29wZW5wZ3AvQTRGRjIyNzktY2VydC1wb2xpY3kt
MjAxMy0wNS0xNy50eHQ/c2hhNTEyc3VtPThjODU4MmYyNTI5OTI0ZGQ2OTI5N2I3
NGMzNDBhMGEyOWExYzFkNzViMTgxYmZmNjAyZmRkZDc5ZTdmMDQ5NjQACgkQTh95
mqT/InkQmx/9HLIqhBye1L0EbwEUEDu8j2yhs5+wT/tmztcsR1+WPg48HV6TlNvZ
7sKoFk7fej7dUndHrpxy7TsRZBVcU0lY+wFsmZuBurnv+si67V49EU8jjTrpkaMy
CRVtjR1zIMsCs/GmfcvLpJU6LANa5egsYDI82YA9c1XWJI5IeNoWD3RGHhMvbKsu
41hufffCDjmLZp35l3P8diKQNFmQsoyryP5Bgl53nNIYFtX4GecJDHYjyP1U3Uwl
5nYQQgioEQT7FcK0m9s/wPUQ/eNUeWreH1hLQfiiUySLC37ymtT2A4GyjRv1Xvhl
sjFqGudwEkqksAXvXG89RVfyJNemRrYE+uLd1rWkzDrW+0m4Q7IL5qO+HMLofj4b
Zh955pdBfHpret776Gksi6fyxkbh2pFaUTG7+Vj3RVRIiMb2wOvEvcmN5cL6yAyN
VgceaG1UB/IRhh3PChkrcCsRJE6kMx1YFbZ009JTMN9mUP3YVScQoKUEj7/Kbe8k
Zq+5dLP8nTBQNPrUW/M7VYomLrwtr0pRNC97tIRgfCM7ixQezF1cpu1yc6HpB3GT
Ilx723pEIUd6I6r3CTISecPjJ2zrPHyZzl+SqvGrq2KD9asSzNrvZsM2wfhrhCXb
oiYgen/QHZC4BYiLmVn3xFAqKM6Iqr6sfs2z6E0zBBVC1kP3crxgI8k+IEkoxxh3
yblYVvkWWw/IMzfQa/y5x6rT5vdIpK8qLoLRA46TRDZ1YWXcUJ183ifB2aYS6Ovu
goW0ShoJmn1ZuNozTvndJOrj6PL2ZHRYKy9WYtVYDUEaEZuywpukUY1TH6K6AsxM
zUzzyL0BEjng0RJhXkQDKIfI1mdjhge49Ebr8uh/CNCT3O3I1vfRtc9yK6P4aksR
7C4e2kVxy9SNxYPoiAtrsls2rDGl/6cfHL9gm2RszFeZlDkBFUYKwWnj6nMBUKHJ
GdYKkdDl28TGXGddQdyduGJgf1p+658SkGmSqP5Xinsf4iaHJAcJv5UcQw2kvVeO
G4vJrnL5XAmlT+bZvM53GrfmBhU5yc+l5EjaIlE4duBdOsJtSjgEAXE2NkWedDsv
+Wnqn331vYAGOiSQQMzV54Fj1lzoeiIXyRAeIhHJil9oXRaHshH9XyKcM5osN22I
zJe6njBgDrwD7sIuflRwdP1fBxJGI4zp7XFZQINpdboy5/wmf8RuuWRIEQd7LSJV
7U0605jBTEuijTDmul1WUoObIQ4mVYZt/nl5pqhEDk0BP0zhpJBFgEWFz2ZXhmUW
hkdRJ+5ifJ6kPrlNKnY5UZLQsfVFDOYuOnIwlT689lbovTr4lLUvqbKKjXpgU66r
2mJ+txMBDeKxY+5h99WtkFEiwtN8lbZSArQdU3RlcGhhbiBMaW56IDxsaW56QGxp
LXByby5kZT6JAk8EEwECADkCGwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAFiEE
W6H+SftfT2DJdNmRV5s0r95qtDkFAlvSAEgACgkQV5s0r95qtDkXfA//S0jSnbVq
yWNYAARvWRvqvX9dH+BCMaqjLgtZ8FsQwq4G35srAKwvMUhH9RALsdHvYtG0D//O
VZIYrzv0UQCjrgVngG/VPD6aTBtY64W4Acz29+QVZ81hjyAsYqYIkg8DtHH8M5y0
cBxoVCurhjYOmAxV6JtdbRSPrJ8LEO3+VV1NwZgPH0/fRLAClct/BdHSE6m2qtIr
Bg976AqdJk6dXrf+pmbrSGB3ivYoQad5AyzQksXex0CHtTT7iDxr66EXFb2M6+AY
LlD7Fha8bt0SELmtJa4tX2tcFlOnk9keJ10BIIyjZRV70qanegJHMRHXOralWLab
429AcVRovLqpxNfOf9S+xe/cZgo05yRZFHfIt7D2fghxNSzi+YGOuEsA5sbnuwTf
LU1X37zQoBOVCLjliFwPDtZONskZIcyV/FGoVLBfrfnRhyXn62UuMBIojplHCE5p
ruJc6rwIid+xTBVQVg3/fA0Fiu42wrxcn3+KJZBg6voT/pxABOxxFantOBuwaUXM
mi6A65pZOekPp4MbSfEt2pu36YXO5hFi2BOvRpd6edbfl68tbpgUdalROHLXl+Vv
7ThivjErxuH7Jy606gvRizoHsOQBA2QNOT6V7/1AJHVk/KksmnKZBZ63wyyWvYnN
D9ativ3RqnwiriFQ6g7lQ6aWP9dP/1j519GIRgQQEQIABgUCUycG0gAKCRBOCfMX
5yhr1bO3AJ9Ll1gseEcM6Bdbhf4725sOBNdnxwCfZTww/VSe0PJbA9aS7ZRb4UBJ
hxuIRgQQEQIABgUCUydb3QAKCRBta60KpvNA7T0pAKCxhJEGpV+rmq2AT3R3kJSo
zjGFDACdH/PsnVBOBHg37XVaRuU3lVjuz8GIRgQQEQIABgUCU5jUnQAKCRB9bIIq
WaPtkCoTAJ9lWXcw3kT0Mp9eNEZu6s82KzP+WQCeIJaRraxpTqrYZ7mUOoRCUbn7
TQeIRgQQEQoABgUCUyc7zgAKCRAs27EIe8oAy4bLAJ94DiTD9HWvmb4evGVIXiU3
Fn7iqQCdHMAWiEuSzHpE00xVLrAsAbWRPbOIRgQTEQIABgUCUychkQAKCRD4P5sT
3QvfGoZVAJ4u9dbFjavucdgRttXyiopKxFQOwQCfS+Ksbx/89xdUfS3KesuGz8qY
rK6IRgQTEQIABgUCUychnAAKCRADoCnLPxVVzSUuAJwIjbrzfdTKUpERBQ2HIDfk
TVNHVQCglQ5jtcnnrSBUAKgO7TxxcRySvx2IXgQQEQgABgUCUyTwnAAKCRBkhfTM
NBnWx3liAP9y+O5olalwlYdhyuyJR7uroo8ozybuq7A/mh1XHWMShwD+P+QCv65t
qXcTVWyTdCPbS6MwYgs3AT5rsPVrQ1ybDs2IXgQQEQgABgUCUyT0ewAKCRBkhfTM
NBnWx6/PAP0ZbmVbDEkwz4r3w7PMxa6v08PHsZxm/78q84In5wi4uQEArUMxyO12
C7OWNz9lFk5FPeGFIbkg5YlEsapW9tX/O72IXgQQEQgABgUCUy4eIAAKCRAeC5X0
GIYH5n78AP4qCsZkIWDcnogK5AWbg0f3jc6xaYdZTMxBfTlkgMAr3wD/QolagmNm
kIhOAeczfketDKwVIa/NRkCmCXgEwGvWSm+IawQQEQIAKwUCVmSR1QWDAeKFAB4a
aHR0cDovL3d3dy5jYWNlcnQub3JnL2Nwcy5waHAACgkQ0rsNAWXQ/VjJ+wCfdhQT
qq/YcVIVAtYPRlpPZKwQXb0An18bpnwkJruE6y1L42lIyTNn4BZOiGsEEBECACsF
AljDHnoFgwHihQAeGmh0dHA6Ly93d3cuY2FjZXJ0Lm9yZy9jcHMucGhwAAoJENK7
DQFl0P1YQS8AmwZ1S/iotX1q6TNqGDWJ7uimUmquAKCgaeIW/nPV6mJaVfqIZQQP
my7qk4kBHAQQAQIABgUCUyYu9QAKCRAguZno7QeXMXeoCACuuJIwkknl9ZwplDtt
wbYfRsrMAuqx1Rdv4HQXA36zKekWn38TjIjWJJyfp6u2p6OJfwvqy0M1lZ1xYBwj
AIW447ofF2q97ZUBTxhbNcWZTHsMx08XCP5GnpKngVJtvbjkcsI6F2RIUYUPVR/U
ahbpgzUnoBYqw4E9khU0HV0eKUE8pwhuUmlxOiqdQyElWQtuHAEKg58HvLdIarBn
2aQ56UUhFw+vAL8WH+r+ZGYnJTFrYxXc2NXwope/Dsy6BScHADTTwR9aRW3sW4/n
vODpXSBn0ecGgEvlofmSuq8LIuF9m8phKZPqtjCS4QoUJSYrA9E13EHcYuIKrApx
XCNQiQEcBBABAgAGBQJTJ0oHAAoJEKOY7Hs0x+2Oqa4IAKVi6KPUTPy0IO8/0yxd
8aazUmW86wgkkbXch248XrNLXEqeSIi3mqjkCOdu2pu7K+WEbFutzEhGoar/VRG2
+Q3fGF0UP08B5cUCbiJeUokpLoZpDlO2i9bJ31ZC+jTwTygkihGYVDB69GICc8ug
vpTCm+GZLyAwDb+ZCgPODLUh3pbtUmdkzjKyOfJ/4kBFwXfs69WCpIwdHKlwKRZR
wiflgQRhbp+f7DOdRXOaQUHSgQLIsRYvwu5Eru05AWquIw/352YPJNgDYrRGAJjh
g9cjsDuEiTdLXFISJfegtOUnlhM5f6F32dCAcUk+38jCxP3Nq2+Iu6R3II63B2AP
u5GJARwEEAECAAYFAlMsL8cACgkQZ5jb5/bi6wg2sgf7BfImUpd5FvipK7cT5F/y
csuivAZ4mgbrKPEve1mBpuRBV5rY89dWzshXCwobmiBkax2qXxZa/fdtGtGlcR5K
R6UWYe/1j2vCrCP7y+uYmYYlf1s7af8g/GqLRjvbWYbxTj4uaiXiplzUCSHMa73J
D3i1N0mT6sBVUVRqMzviSABt5fXrfXaYJTxE/gOhf+5UJlpoFmFos3Mz2/gOLyaQ
FxzKNTbLrLsQZzE56/1djNty/q18LaYBMC9RM6yzFhTL5hqtj2kvIr7l7NzKFJeI
59ayIxvnGZjHqfi/7WWOGQy4pQC+xF++7aTC1iX4QwgcF68gUhNOytmLhEln69HX
1okBHAQQAQIABgUCUy1+kgAKCRBRyDLL1gjc49BOB/40TwApP6Rx+Pn5VMLeBZhu
QdbKiEVJlhTOkn7QdCLBKEfJj+M9DlpF83Zxos3dFh/hEDyezYu9hmjGBMpFem8+
+yYnToa40F1tR22mEuiCiR9Krkbv79+K0dcBERO/7P6gjXoICDTMydAYtFC5y1wP
9CDAduh8+G/MvAn40M/+CUUtIlRI7NXl/BjLe50aflLXJZ2NxZMRgLA5yU7b6xpi
u/E/t2ihmxq5SpnVe2/0PmuvXi7skd+jAXb7nSeg3ne5YFPOxiNrmYBq9rd0LEyl
8rhA/UWBVmdDCFhK1ur+HBNxfmZHXFbtSMbBTn2ElI+CY/os2LH65qlR/3h44skb
iQEcBBABAgAGBQJTNTcgAAoJEO30GwOFF1icMPsH/1IIGMK1ucWmDJMoA9fo2UXD
AICWB+pbOE8Vdx0KAUBeNbi7U4PuvY01kZjzx5+s+/l3Zp9pwQ1XSv7GW/vmOyX5
WC1iZHrmj/4dqYRokhFyCPoZw9KXS9fin+7vFLLvD5wBUv+TA2oT3Qo5qGNj1jU7
YMvYGPopbQvhEexEP6gbu0WLoihZ3/lgNsEPuCRAxvHUsNlMA9r/ysZ4/bgJvXto
lwiIVxJrveu4mVyUgjvXf1r1X1navV/6zepzfzURXB3vh5Fyv0c63nmkQgQt2KPO
GPAL92ekUTohhvyeu2Axr3SpECGpz9nrxoB9pf/CpowSCNr0J0HRYq0UidJ37d6J
ARwEEgECAAYFAlMol8YACgkQ8+aPm4WJpCxEiAf9H418MUU1+5P70bCsH4rE8HOA
H2hcWwKeDAuamIzsiLRofSwXr5dgoMAorCD3hBabtrzGgmbdb04HQakcAex1sGWN
BVUlT4aYhVfvbL6wd5scQ4KSwCVp9ivar1FDC0kmjt3VZnDODeF+Yd5wonlw7oIy
KL6ClDAithDKR4ppgtJ1lsz4t2YdhsENvkEWS8czH4++ebVatyKnNIG9uUJ5Lme2
5CCdjEwHcoNSqSfL+6lhRhuSFuFQ5Wv0iq5Cl/wjjq/lCYot5YpCBumB3CcRp22H
qzwsL16LMNExpA3mJvrJMZrHSyTHAlRS4LTBZN16fK8GjQYv5jKSZ7ebKQGy4okB
HAQSAQoABgUCUyoWQgAKCRAK3GK3LDhBMNDZB/9eh7xMwvjlKPzAbaZIsUAUa+22
U+f+zPCbp/bTjrxGWeLcIF/IxnIA3kANMbGF8j2jcG9IRy895KG3owd7gWZNQiDn
5VA9OBde+x8v6vUzIiVTQW+hZCosW7Wox2JQj926acBxwOiM2yz1n9Yg5M7ZDN63
Se0ejsQVEJnA552Re5OGuW0oNCJPfm+X6xh3aN/oC0yLfGkGPH0KBYGI6xmHcPCV
jgOAeAWUvBFpv6q8j3eGrnIAZt8jspyXTwqFi/JVItb0Tt86KO40axd4xgpyfDxi
gRN3v0oYEbnHds1VXzdOlcHxBkAmu/3xIaZVq+BaQQshjh2Eox5/musWzdHqiQGc
BBABAgAGBQJTJj+gAAoJEAxpAkyX/GRRi8wL/0HUa7UuvtlJEdSe/BzSB+8liPuk
vGhd4zOI2bqUHeT2Jj6myrDgIG2rz77Qj4eby5/ke+/NXSxZ19JtaEonhUsmMg1l
msf6ngivft7j6YkFEeOLnc1LnZlx5970phR/a8Dl6NhsvfIECb7tAHaocqadl9wa
30pvRALH49l5gvpFPMHaLrOKBxFV/yxEXIRrEnVwDpDf42RnpCaZChnc1a4gDoRH
c/PLcWllxqBLRdtqLnikZFIriNBwWL8E1A58+xvm0b7r09y9nD26lI5vgOOqL/Bm
xg1SIbLlD25s1pHd1cvtXv7PY0q9XZFATk7w6iGBF4RN0omdPMJRome9FkOu0dCl
tAXdF4rMoW4l3sdy/AJix1ZpAHzYyu/VwbpbM1/0WIFnOkiA4yAQ0/J8UGO4HZ4r
pWM4PH0HfatXdJRd3SDsc4FaekrkGq20iosX+DNyc1P7aj2icPVGsF5SzGzchGL8
Imh3HdtlTnbhjXG1OcKIDb7uMw9dRT3PND68qYkCHAQQAQIABgUCUyVjVAAKCRDT
kj4NuPB1B/RDD/9k1OkgWfda9OS5i+zOPFr7N6W9qgSllLFXRceBkdNDf3YxUlwC
KKO+8+8xsP7m/HkxE4V7NSVFKAuO1Ia61DWiMsoGchbOusVIucpHTKcHVN17xd7a
T4FBOGQuVLPvy3Q97S8ofxOA0psBk2wttwjGICiALS0WBv+bss8IJ0K/eP4tlGSL
ClJR9/33Cl97aHqBoKIVqhJFiNM8jTREyUAgdm5JmMRE9ZZWKleJqKJuR0LBJjpn
olDjOb7ebIamcuAL65azRpssne45V1JMPf+VSqyLQFhJoduSlQHjJYOt3AJ83sWF
luShOjD486RYm1885eg3TR1Ppke78ZIUxNt72YA10SDvxXQbD2oES1h6ChTo9QwW
pkY4ZWUdTm5yMTCLLBP5jSOtx67XG9JpmnRaKDln0fvogs5VHCIPQKMK9EneD51O
XXIABfcY9zoqcoxo/W/UIoVksXRqPTXLXF/+mSRwvsdTJ+QBjEABciMofyiljDWs
ksH1V/6raRqqEUOu7iconIJhUPCAh0imn/fpgM9tn20u8bJO+I8YgedXZOIpFgrT
d4zYrk0UdUam+JALWfzA9qMfvDPnoNDzJoiXsH4N/7XXuBKD0m9v5rPFQJGHaudE
ILamP/HI2053BB7u5J3hsnMfR9cJqeCl4dvr6XmtJ/t62sXLdKyqKoKxLIkCHAQQ
AQIABgUCUyXKxQAKCRDyJOTa+eQnp/+dEACFcT3/5Wsm4f8E8JPAGrkKh0w8fKL7
CYzQNam+5ai8oDK4jVwAw+j90xhNddt6s400QvPrGMO1xAHfh9lQDBYcn4z2wVet
VsCtyBg9FTqQVKiLS9V76ULlF9oPDW24hQxGu+xLQXuBsNPLHNYW+2A1If8TrJp6
rlJ9Q72VKpcXhVR2xSoY6EkEZ0PozPgt9awomNFH7NOH1aHdjU9jQWA40uvV5GVX
6Nq0kYwMTVuv8IlQ9n1YoOj56j4DfgxilZlNqxZuz7x9ZrTPRPhqcXKNLdV11J7F
FhZK1LjUXead7Ff97pqUo5aXArRylCtn828XJYKw5W97w+YsPHW7VQvHkX3r4lJ+
OKLTHg8nW45m0LbV9ewCDzgsWmM4QcLahg6l6Y8VB+R4hufISP+u5yBIRUGupEuS
PIIY/I6dp8K6A0cQsTMxWFGfUFeJRF0c2nTDm57EMaLDfVhEtw9aTY+kPCv+NcJj
ab4DMYWhe4NytLMPCL25nln9YJ54Mq2jdW48PU/J2UBnGtZJer5HKK9//fN7Jyfr
9vdRkwKitzhdsHqNp7HLX3fdZMkHXIbd86cflxiKJt4bE1XtozIDCVyuak1xTLcA
1qpsYRRiggr/R2APbB+NLSzRLAxFCDpKIZcZmVCPlX78IecUYLyLc+6Nl4JwfGXT
iz3nj8f9eUXQ5IkCHAQQAQIABgUCUyX1bgAKCRCzcLwcguheZg89D/sE+vcEQFf/
8C8eXCfPSlAfCtcTL44r9pW8jq1Mjdb+vUhebfdsG66YA4VyMmfKLTSx8OD1Mv6q
yHzMkILTh3PT5tWgtmMR9Hglwt4DwHsHORasHK6CUNbRt7zO6moCRfACm6za5uCx
GC3oPprIn8LnLt7DQzGS+1DusgbNLw2m4xDunCYn5pihNiUQbXnPmiOoATn/fFUC
qRP3HHQtQOND4d0LmQiCu68Jy4guPFQeEowpQO/HuXbLTKIoldIs7fBwJ1DdbKT8
Yehdrgz6RvlEgpbCXZbCHbpF7i7/YebnmV8M8PtE8HCJer9qksr0PNfdfHWFpHEq
DNa5gPvY2fPwlJrvhcMJRQIdeQ16vk+Yln7Fb+EfERotHjm1pCCasYBnPknmZylO
dDuxdiuINE1+vkdl14lO04M/jLia6p/VZnhNIDpgDEIXbSQnUr/kXdvauMUS1W7N
z+Comlz3Nx9CiSy7wQ6fiCwTNtiHb42DeDOK5TZGOMRZXTYFj/O7YJNzZU4kMhTn
ak44BaNpsSjUSdv6ySX+PoJV5HV5SIlHgCOvvc4RfjR/0YauQgvL5hBwVNAye+hV
pS2c6+DHm4yV0sZemaMdDT5s8vEKKO609Xyz0vrMBc4sRWyJYA7f1XvdRnrhumCb
oobFPHYjU/WI8OGw3LswlaP8Lqy38PmLCYkCHAQQAQIABgUCUyZOdgAKCRCVhDwX
/WNri5rQD/9dSG6MdzmW3mk9+O53jbx2CsV6GFGoHOLOYLCOUcHznHX4oyPqslvu
iY0qhwP9jwtwtGDdzawyA+WwWb3W62IxloGDUK9Wx/p5FX81LDsWtyXNN16QzGJZ
pNoGLk4pStQq00kLW8j2zw3n302/TRV2A7gk/9eEoaNqF1jq8tYfy6vTKVVvuWdI
FNnu0hiPw/alYFkKW11GcXV/GakvgBmMHa5kZi64Mkm+BATtgL5vFDzPPDeFHcZg
48kfWg/gtNsvic2lf52irxtHZ363O3fMnhx24LuOkGqWWmO64ME5JYxTOBu4sBaE
YGKAkpjC72n/9pe0XWzWj1SRlLX3Q0CdwFTv2xnx5c1VNHjOfXKkgaV0+3UEZAvw
3o+IL01PFDW5d2x3uCuFX3R5mYwrHQnCcf+v4ZxWQ/BJ1kRn3lItMYqxtgDpTLBg
Cc1T+vjetZk8m/8UH4EzvkBGYuO7q9VsxZr/FK9/sR26w+ycpFdAtvSz5LM0pwEm
D2yODj3C6QLBatuCSsNV38jeysJ/eQ1WVOdvkvmsvhFTtAVCSMVB6Qlaz6q6vbf4
tJpJGVZ3sHPXEcimvZOpbbito3xOeEf8DIO8h06NbQZRGB7URoFKSk9AajHbkZvc
QPF3CsGugJ0/PxxSRVRfhUjDwf1WBzPtN8cSMb7/AuNszG8QbtGhF4kCHAQQAQIA
BgUCUycFeQAKCRCaNYurBKTtJwRKD/0Q3rUxXEBVl9IdI/FXMSoaUt1IiK9gccEs
5RDU/TsY1/axuL2u5gofa4EbI/llHUOxrfwLD57V8XJvHEOEaBWebHhOVf+v6Gxp
lxYmyiNWQN31SoK5ffyisqrsqLwfc4TQERAMepONvOQz1FZvp7iT+CzTe5cBMd4U
Gxaz33toEfOcfy4lPJDCH+mJT+E9iHUC2oZn/lxBGAMUcWaNi7C70mUCl76/i3Sd
qlKiCc0LuuWzjTxqEQPFs9Zoc8ufnjV4wFxjMwDBhcajEt4LeymAaY/xEtnUvQ9C
rcLKef786SkOulVyEuDgYm+0qCXBpmwhGr4kZoMkuKTIvb0Qas8hwZTlRgo/qAc/
glUYcX7ycMz/KM17GHTjdyVkHAD7C4sBVEi7JzFFNVPE72EdzrtNMhMlDSsh8DBO
mLLfa2oLhb5BV32wA+jGniAWBoT9WzPPW66Ibp+M0BVEcQa78S0fj/d7v/0i/fjR
CHp6yC1R24J4LHupR7I579RcCJpbJBrDCFr8oDXN3lSJsUjkmQZhPMgkpcsHiZRH
HiSbn4lQQeW8HoTNe5r6E4g4crDz0WzhOsosA/6MxHFEoRVVIS0kMyUEaWLrZTRr
hhNIRcH/DBwRfUADREh1gbtE5EIhQmdNpKGaWnlaOPvXiubuQiqahnTYFb39mB8v
1puHi/pupokCHAQQAQIABgUCUycaqgAKCRAt+m1AOBWoRwP4D/9+DryQ9CoQQafJ
7vgPHscEXrjswVlgeTcypuduaX4ShAs/yFccZbfBaahdFeEV8yyt9n8crdBseURr
ti3zt+LGzCGxUl6QbNrbzrVaAAm3Eb49VAjc6XGJK8RIwwQ7uPYzPX3RQFTPzJuB
b27Xf4DAgyDYoDi38tryQhp1g7+0dQOuLFLMD8Ny1yCMHGhe9uN2O1yUjEiRO33t
Xij72Ngl9q2tjH5iFIWanjX3MDmvxNJ/C2XfMq+7kz5vviZf+4PK0DGU/EtkMSOe
ro5r+FQCl3oHw5qWCd5k7yG5l39FRCG/y9ILmPpj/iXgLLXc/ab7ScgqpFBGpfGB
Af9PrT1rvW2M9JPPTey2cKyua2cCNUVJBf+FH99XxegC7oyKtra5DbbBxJRooo6l
0WHer/H8Yz58aVzFiRxHjr/Om0TZzqKwePLpKpvcSa/xmVcmhuJeKFBudLR81CcT
fzblDnCcFKvDeTNwk7+ljLa6/tOiMN9P6cfubxY3/4tSZrC2yekZbDvIfw5aw0we
jUKOaCGDlE/VSbNzNvdyQPKfjc3rS7lBSC9W3dwtu9gVpHM8JdcSRND/8n8PF8nx
Cbaw0pPaLdlyt1UE6zGt5EUHfBd5/20F5d1RLXcRo3Lm5P2yioBhdUN+yjO77OH+
rONdV/WodBhdqdLlNM99vi15WUikdYkCHAQQAQIABgUCUyddtQAKCRDrEAFmP+Xa
3r3dD/49nYug8GOCFpC1HghuwyRxINrQ5c2ti7LDRc/mW8naX3Qghb3BUg4vD+sa
l2UXFvrosXRpSKWHD6TbS0AhCBFv0wx0M/+Lz4IIUPwnnPIJsZ4gC6Xe9uYHHX9J
Bjcm9v12s/ChKHGbob0/o31d69ff7nKEwa2OBq9siRFZR3aIV7A50jDWFIfmaqvZ
KAK8msD+BdjdrM+XK3FXJqgakG4pVTbn5/zq8M/gmCMhxOJWYhvcJZeh8SyWrH8y
STu5btLbE7tmXjaOu9s9Ilu3GPjYvAv/alhSL5fxuP4quvYG8dwAZNg5Hunn+GjQ
QlvuoIn34vnE6OMaGd5KDy89SfOlurh3LX/dTPwTWIxlKuhobamfDsfS0rO+Rvld
M2QsL/Fh6gaqpPROtaY94NHK7FaZP+9I4uvI+eoNErkhpCMZivgileeNcH8xR9pr
SnOtNtsZHAL0Vkqj8QXjg6AVotoJNiu131Q5O63UDM9OsPICIXoiCWP5OuBe4ZSt
NGSKlK4SHQRL0VcDp6z1bdnMdHrLtOjgXGoe5C/Gnhu2g+Vdg7OAQTOGfTO7UNNa
0BsJR2bwq/bZYVjZKe9LGHS4HpXhknoHzZJPfPdd/MwjOSv4PcuLezOEAHusomc0
qKK3GSufmK3v1rI7ebiwo9uJiFzww4SrE/uBQxTlg6QiaxnMxIkCHAQQAQIABgUC
UyddvwAKCRAMXMk3sEJFZp5ED/40LOaREmSAHLrZ8R5brbUX3Bvdjk4PvTZTnTOX
XWjt10dHmVkw3xdG9Z3pBlC8U+eWLLmkXJyjiS7zjfochYXLyNsfx5CuaA8KTDdo
En0VlkRbreJmXqKXiBMLyFTk047uZjt9W8axI1CD0DpmPLnYAeGMhF7dqoamq/np
GwgW/aLkpqJAuMr1NRiKyawv+texipYMQJ4eYRt6THGp/3rAfqtwkEVju8w4Mc4r
eYZpbkZXYAh77jcmxTlK+a5c4dsjNDzdBhCHmhIq6HtxZFsj/GA/jYgX0CEyFVMs
SRHLMSBrA5IbbVgo72ICD53RUM7+lsb8gvRcFSTE6eOQd8aF3nSw/oZJtzj8qew/
RjCdV+Wko8LEmju6G1e3QwAGG1AY3wQEhKv8Fwgt7mS+IVDO+0Q9xKpgEdWccI5U
IXhxasO7tsuEGWwuN6j/xY254MBGywYLdyjgaV6bl+KGgpO1hZm4AMlMj79GShfa
45K/kRWAxCsFqG28Idy5WC89kXqh8f7dz8EPvGeXM3HJeM/Kl4mLxiBWj6nSBzcS
Xl6uQ+A4BxV1ST3NhiAatLEqdEe2tlhgeAA1vFgg785Xv9vU5KIXNhYKju6o2bto
yZ+J0yjmZFE5dMj6HaL6spqdZinfJBzv5BIKGAQQue2QOaNR0PP4FOZirtNmxn81
KDVWMYkCHAQQAQIABgUCUyddxgAKCRCpkcQqteewiF3mEACKbcjASgSs6BPyJRyq
oT7S0vbbAPc3taSgRAZvTxNund+QYEo5Dk7oedeY+3TBHEMzf5g97wWXcp+4TyYD
LMzUnCU8G4cpEFjR7DsuPQXSrZa8cuQt0BBrM2EvnfmJwrabNzy7g3KOj7F+Xc/7
CKXSzj/TZBJGS9mx6gECsFp2ak/48YBNHSHlbs+e6xYP+M+OT28a9k2wf+CZeAKI
DuEi0t47emJdin+1LD2T+k4L9hJGvC90Qui4qpgeld3VBwBGu9C2b7eA8fNaj7zV
9F6uUp5wkEGvx6XBS8VR5zu4rJMmEU7X93n2V8Tciqzg9tXlecAIBbG3BO0cne8H
dTjnG74OTHLtqwO0IBey3WZRwEksJbB2I47qUNI/s/z4pWvDO3jEklLnMZfTD2Dg
y93j2QypiFF9Ng6ZOTxZUVjItIZCAjFvXRMzU+FsDryhfcETKwOKrcOoOLaNf+n+
Yyk5TVYRyKpNckt29VW40CtdbdR/UJBF2/B2rORUKrZ6vlXWJA1XeWXSNAES7w04
/8BWKThV927iDrbcIRvuBSsFzK01RvPTFB3G7jKD+f6T8KGOGvCUzI5T8QkR7Ln1
i1UrVv6igUH6bA2Q/jYDCO0pNwjIxi4R4JjuN+aTNkOPTWHF+lzUZ1dmnKJ/Dyxv
UBV/jL0fhFjcwTEYPRbZye/sqYkCHAQQAQIABgUCUyf/cAAKCRD1Sz3LMpqaysGx
EAClEWfpOcvLZtriwe6SK4h8voaPcN2/8ooLFQ7RIy1TIMeboGYs0T9zBB/Cll8S
/WX4AADMeZLS4vI1u7gk3uwl8fh1B51/QlWv1zA43LahKet1xEM1TsLXLm7nOsja
Ot8eA1/0iGek/3KnIqF7907wdKModwEUzj38a6bv1M9HIoHSLCc54EllnPR/gzLx
G1FPr29IcaWVyNE/vklFKFetZ2x5JUmWi5cclV5xFYYVFP0+QSYTbsgNW86tAIKx
fzHaX80vNoxTB+eKPovfm25mk1JKvbCZFXC7daU/xS2apz5HDl8ORh/pXW7AJKlP
08HXDZh9E1iOM7q1iltexw8W0cpvuYhrRNPNlQdzG3eza9rO+UmflyBgzyIvttnE
2JDskM03+YFJsBRsBwtIoPooK+qkKzp74pUllyhUoeHC9oB2ZVLfmm9pWC8obywl
Wy8WW2uRpfdgNncjBcW2bWcFn9qpeX8CCfVvutd5Bfo1vCfo+RCWpNjtZkzrkMFq
mKNOQlk/1KP/QiJDMvkaFrmeA+gVTrNGAzYNrr5+Ofv1VWL/kZaJh0fGbSDNyOM6
e24FCz65otNCS69kgLsXpltXddBSjvajFhydtWVi0oO9DDE+RzPnQ0If/Zgu30hv
eWBZs2LAhOg80HZ3rbSQU0/7d+nKBcHJBEMFQpiN+6Xn8IkCHAQQAQIABgUCUy6o
xQAKCRAq8qNEk3YR/uWPD/9dBO8Yig90qbQEwSEjS59X5T06FZB2DqMtic8rcecI
ILbM+AXvKsugCazLsG3xEt4hyX3xs3Enmvq0XJgeu4IXu546UnYzuOtrqoVEHRKF
2ZvUtUnF/8IgHq4iupvg3OVntO6FnKb6Nu7pqxSoZ60UmSbTx59594UrVJTK26/V
OUN4NnNRtzHbN0t748cV2MOgwAqKWStak9xU48sbRHSp+RnalXKd41UKPYI3gpVR
JiOHEpThUri2XdVjZB99I/CW6At/potJlrKMdvP0uWGclujZAFC4gRIMP176j7ge
aRJPB0cOiqxKBlWOa4ziOll94QfwCpV9K2vvz258/X3LZyRPATCuprlcE3ldkmVM
0o1lR3lTklz28RDH713E5ZYpggc7XVS9ITqVB2GiKexHTdJhHctsxhfLjQMADFuq
Qu+SR2NnSTtDeMqtdl3If8PnNKb5GQEIxiBrjcwqhHGlRJYMjuGDmcBh20gmdU4n
VTEmNgjHB4jhYwo0TMAUb9UdDAk8VL90lIxYgHYOg+G/thZK1kk9Ys2OOyWa2U3F
vlXlzbHudBPHv/f0RF//TGTjQlj0egzcrJnGfqCl7ZG5CqNQxgUNqK02rCIJyIOz
CdUods/y/wxTWDi04Dy3E1VmMRxRB9OI9/35RC6CR4UDOlbwK1l5GL+8FRSM1GZv
OYkCHAQQAQIABgUCUy8jHAAKCRBMFTpmvpVi4aeHD/9tc7/7RNzzxvFm5q8EDbdA
D9QmPCJT09efKn2yBWrm5hGq2ntkRwKSvipxjkHAJJnGYUTe2QyzeDmj8dh7IkLx
iOZwOWQ9Y9L7Mw+niBOpNeaJvzZ9/W9J+6dFzdGAq2xNaVCSL+YMCe7JNcpADSKX
gcVDjjiTdVpzmrrBr15F9m/+DB2v0sS8z+gDPVKQzbFf4O2NO0+RtiH/OD7Hsvs4
D+rAFDXT+3aZ3HzpbRxEQVUWV9y388io92Hz1YbQx8EhK53rJ53wRFlZu0035zRB
8ZE6lqlj6u0vW1hPHGZNP+IoCE7nYWUPzX54zJVaVruOlz0rF5UMFLjJlnKt4ruF
mxw90XwNYPu4Xm2NVQS1hITU1s5mVn1M6rpQXpL4ifaGWCoRVLM6J4U2R6aLIhFw
rhlLPrfXcMYf6ma87f3IDXATiAiw2nejtvSx4Vc2qTaKC1pDfxDQGdKB0u2gA4NX
PSIyb4D5hg4Q7VA3rTVDaQ8L6bqGasv/f6Y1SrXlP9Dn7NmsOPeZ30fthWCGXZSi
/q0PD8i65Qe7YG3Ohl74g/gAcz60JILnG2R/Jl71Th76/64k8S36HhSfEZ1r92i/
Wq4eIiW9Eq+jgBMXWUdyJOYBPXcE/dvW30dg8AuatVxVRZOBlhNL5jyWDUKr+KK/
t/ArWCBD/3X++lVo64jC9okCHAQQAQgABgUCUyWDiQAKCRAZmmT637UA/4msEACk
+ziGtMInK9vF5hsWVFaeELFXYc9c7u589KWL5rcWwuBu+TPMZl85crpOjE1UGc+j
4sbez5nRdDni94BPZ7pD72B5IxSJG2oseD4iCx2zuIhsZkoxSfk7pvqHcJapSvrH
aNgd6mEYjNZekqxfg9IVo07EVHMR8cWsXDTyDJJqFhXcy2YW4N86zWOg3ILbsWvA
vMQdawpV3TcHer9fid/KTwGuQUBekfibYbLyQgEqlKhdv3TmV5MQIUlxd7cGo9dr
aZZBweQr7BDnruJMcsvyX5gsUHBNyvgFNSxt7VSjOAIOOX7Cx0gwQ9preByYZGAD
arC1QdyFa0H4y2fZU7tZ1OYl3oPfnJ5Nu+E12MXw3TChSk38VnYMoTtjmLPz/r/I
w44/Kn8tShtbKMWP8B6hLaw7hdnyz13rI4ST1jdySv/xKKIDQNQj4gf79lumcukK
maT/yCqwwXBDjZouqMq9IFriO0zXaFRltjT2bXg/NysEEbj/0zxMtP/vU8ZitH/A
ST3yNA6pMqTBUanu6l9gVrirkDiA6b85NVsWQFz4KAf/cHh00iKC6ZxowSkEWp5Z
DUnQIjqIxCmz7WX7I2AE+xkHVdIJJ88/At8w7wviJw2vparcrcg3pnaDyZdpXn03
0GQbKzmG3eIeOrhoF2aAY1r+EErVhgie6zMHSJHe3IkCHAQQAQgABgUCUyYhCwAK
CRBls/CU6j5NYRcjD/4u4ZWeu813hwZmvEoV+C1pav28QEksbb8HKrqN215YVHiZ
k6pYm+8GQGTj+HjsER6GL7E02uQifRidchsOfhSa4cDgqIjz2KwNh9bC2FFc+k8f
2QAd+uF34d4AsVm2oOmb7IGRqU4+WkAwbuK1aer1umPmqGn7lEnpkVAuxUZOyhkO
ppNkLgzPPn31e1/ycXkaUUyAogJezDYNHMIJD21e5OEomTgH5Kbst7CheVpYJ+b6
gZ0yFvxnA/DlC3apUYnxRS5KqS/zlSNl+5XzUJ1aCFwvnfWmej8Ot60ssxo3QMm7
tJ2wCWnks+NTXHaSZUiRAItKE+l9N5N3OIRsXA7upkSKwplDSSqPcBMH96S95A8Q
E6LuDggnSJ92d5p9YhMsHxQf6Ue1m6mpwdL4FYanZqMPNAZaY/RVC97+n3pB+08Y
8NDhoR/yyQig3Vk4n8ZlIOuBc6GundVt3I3sS96CWvHw5dma60tUGxURzhN+rhXH
pN95j3NlEBgSXeDtf2aK9EtWohhqKa2t5ft+1TXOl2/ISzPrYH+IXhlp+WJVoq0v
W+Wpi7Hr+bDM+Rwu4p0+7jJ5ZPJOZCJbF2ym7OoxlTE1KnchCKxfX/vTEgZqF6Le
92H3W6JBk9ueHqw0UUhEQkkzAyDQouEI1JQ47o4iE/TY+k49W+U16gXATttvyIkC
HAQQAQoABgUCUyYNqQAKCRCnPgBVVY+43Qy4EACCZh+GAPDiUztlqzRhfV0q/327
b+rDkig63wikB+kEQGg92ilJoV23qng04ALPrpCjf6gKz1FBJAPJ3gJjH/GkWhcQ
Kj4wEJImFeZcFKm6HsRXevsja5+x1pq/sjXF+GXK/FMlnqwqtbKTts38QGJVouxw
zgd5s70bB83iFeu0dVtNGv93sAJz2GgIxpuyl7xvUNo0trymaAsdpYLVSYlxOQ2b
lPrfQHu4lWeUKjwFTXLLnqQO2dVo5NTS397RQnmVRt1iy/Qjf12R6Nf0YbHTDyN5
wIfPApC6IhlHQACiAsTpW6g8QoBqffWTu/2GzM6Gb6Jhsy2EeZrsSobTHkTaBUZA
sbZ2vh707wYby9H4M/ZIu4Aofo8zajcNQ9DQ71BTF1tFDFBIQWHXrp3Wa0ygl6DK
qcSDN6UTtzISZANcukqE3UYPyL9zFnWqY/Zs7miyH4rdoIfD4Q+dEp404rnwqZbN
+aw0Qnuv3dKV4V5jiS8LPcTigp76pLd7prml/H9zdkAQncjeb6wYDcCtJF3by8qD
qoHs8RRiv5d7/rv77sO7e1qDpZHdkLlC9t+AR+rjrYH90vZkDIZjxNd55zMwFk38
9e6zhAi+5L2o07vO6vymq/+nVfdPr0mGFlLcESvk3mn3ILPJsiBlX4xOucGmwGYd
zrIFUKMUxMIgwI2cnIkCHAQQAQoABgUCUyc70wAKCRBfYxEdNpZQV05/D/91lMvb
+qh4t9I8BpBbYzbc3rvGcwpRuJv0caNUykDpQ/XWsddwAzn9dkHX/G6LFpcG0WIm
CbSyyMHEQ5H7FrNsBA9oo1Q2Cm6daDxwq8RpkXqYZy4EB3ORnpFK/K19SaGOnDvQ
fzV3BMZFmCxhgwT1txWkHhQ64ugzjV7rL+Xbo7denGuK+NHG0Oltq+xga46EAiAp
EdG82jlXW7BNUBDr/GjN7043HsX3TszP8FKqYfGANSD3KECU/k/K+sQPbxJBJq55
tYxY7Q+mZDF9bdj38UCXQ/egRuxQHPvH80vZpkTsSEWjHLDyUCCLVKwcUyyrSw92
GkwdT9OysSrFIKohQ+ZYSgCTnQeg2ecTrjSbakEAUJgMQ2yGC887pjTv5wKsz279
MN9BjOUQOp94XjQhDtgKPZNmn8+1TyPRTQzfSL8gr1Oq/TJzUZUNJZ1Zf8yMtalj
4xNdzDSoRJ8UtM2mGGZxFg5Z5+njDXW3NQyILrHfCuvatfWGKVz1pj9KRM2dv+5T
LP8TOVP1Q+Q4a++xnZh38IQecbyoWGqUUdrRGRtsoF4WaVV3vG9k3MZtdYNuLbUJ
KgNkm/jHXD8BQ4o91YO4YTWokgLvf3r0+gjh5RjuQ49cc4jzkmEooAKOvryJhuk0
/ULIOe16MJuCHEU+CLvCRFSsjox8UiMTwgbq1IkCHAQRAQoABgUCUyc1AQAKCRAF
zM+Hrl/HEphSD/9/1p1BJAU8jJmrNWcnjnqPU77nLQfhI4WIzho7KK+191GK8hxz
OKnQIkefdT8i5Lx/df50QODczbcJXWJWrfX/0xgCNe2h2sb055g0sz2fO6HV47TD
zXc8RSCyvZfVb+u3Y2qZkug2HjEytLVnQh1JesIa0Q82M/Djp0tzomAnao6FX+x8
8JbNWATt+VjOSVp81B5+L+GL2R4Q30PGebRxDHHcu2/RdcklUzKg7YkiySGcO7tM
LVwj8H6fgVZyNambz9CBPt+5AGTIrLdOUfvObovSs4cRGa2hXVqUqcc0GTAtLdTD
6ehOOzt2M0DVKbUNArsaGtjFr+JqVY+1EyraTVvebUEd4u/3rUlAzIHzyenZBKv4
nlDyeFnsI8OIrvTRFFZJpXCVcTWfH4dHSn+60qaom3WSxyfYQ37bUZABfMTxZAaE
1TWKIjKF9612ltsrgMW4LYm8Q5WrjDaNHYIcrL8F0mQQLtVd/C9p8s4ybpXMC9cw
85g594qEmZMsKmieejda1A6Vfvq89JyPcqaOVuwWKxvWDwsiHPUSbghP/LMCo9X7
VygQRoWGa15HcJvhhTQ7YG29rDUU75+kFmTzZ1QobEpWZaXvSCEt4YI657X0s1zB
bCey9T/fxr2lXywLTpIsAxS3cVBLeX4ks9QkgMtoZTdqlPuR9cjImm/lcYkCHAQT
AQIABgUCUyScXQAKCRC0VD3N5Fi/cwYOEACTrLov9XuEmlr8l8Qhf5JWiEY4DYA3
RhgJUpkLsTLez/WRCnzamLzfrhYeHWt7rmGJBDHABSmaDUolyKpYAtFBKXWH6wj5
V+UmdgvmO6uSNqDiZoVjt0/3MYv3ucXyUyGpU0CAsnwcOijv+wjpcS5SU6eXBqqo
6zIXSKM+j+zR84JJ9ws1Oyd/eKPQ9lK63QaohhmvdWHVEHbFTsTESCNsYTUqNzGV
4aS7A8DI1AioHnCJcFKBV8nYELl9Odw3ENe2dgJrDtA09hvJRUeKBcrXoSpfdnWI
RCWyopTLLyN2LAUx2VfzjKsvCFQjOnbiTSnfr9fB9qJYGFFpeOBBTHrHOvFOTmk4
Co62+2hTcqqFWVKczN5o+ItZlLqft458YOj122jg1M4fNCddvkoMubWTBXK23QGi
bOTRIvsZ78IuUTllf/Dq08yF2dT9eIGVZVGnUEiHRZ1QAXIbxGizmI6KGIappZLB
nZrApTtydkZBTykzQqhP4Kqhd4dZXI8EkcdqHK7AGtADpwmpLifnQg53EN8o6z5a
N9DDVgAKF70P7z1BlHeZwRD1qlK42tm4uCJau0tMu4kQhcwE2A2Ocf5oKSQv1BRA
leJq7D/TCfujgzHqr6fv1dXT5MUlHzywuUyv1/FlAtMWar/IGNMQ8IfU5BKCv5TU
qNwSlpyxzkm0tIkCHAQTAQIABgUCUyshcAAKCRCWqInM3weJ1zg9D/9lP2D4akjc
4C2wUXlRxEDcm+XclGJR+oQzPN24HPhsmOCur5otam3iHMIlPPZlh5JghlQY3oG0
uFwJILpw/oJrb4g4EHyL0K+7XJs2fuNSWcF1fDGxrfWfpBCwfJTAf3kiZgq+lp3s
XJCsddL7T2i1aXJEB1nBom2FRVrDYrFo48FtirQ+x69UC+jtIMTlj6bpIGo2vb1l
x1PU93vQZaAoJj6KKPuXShpfhvhMbUDQwJuaionqJiNzVwiE5Lw18VCzT+JdAt38
UFrlHgqz6rYQquxzG4FrPeQiQoPOMuw6Vrv69BWKubYpm44STt3UgjmfgiDJSI6b
kLq0M7A+n37gPOb2zxVS650TunHrHTpECC6tx20oHvq5gDietoynhgeFaFPDwoUn
h6Yr2kTSO0Fg7liyBi0FBUvJc0+r4FfxFUaZdonYZTr5VO5VUvlqG/XdRorB4MUn
4XkUkiOG85qAAcxQIv050Vu4xSfpM2/3Y/YmB0+GQvh6XsAOTTX4o5l0Szl9NmOZ
P/l7XrWOX6HBAuCCPZGn7N2gJxorOajgbtQ29y0tYavb9EF/TxaTOo1qr64VwkEg
3p/oGC70MX00XbMR6dxeKNiCOxw/p1yshQaCt+kFyyWCaGBToLqXF66UTCG+4abe
qAqk4MjetqA4Of8CSpdsIVyh2VbuDViDbYkCHAQTAQIABgUCUy3F2wAKCRBNxeIo
CjJ3VL2eD/4ldLZnGFfXD6miz2skYyA80eRqqyK7Mq0mm3/86H6CAIYd+3ZFmcyE
LJipGrPMO58TspaLqM7lElgRAH2wVbEOLPKfutcTRURMSEfP/9wMgF1s3VTTBY+Q
MZmCaxTQHYY0t1OugzAhLaHNgi3RdNI4wu77IpaLBgf3JChaZey7MKyFqwdIZUau
0AIOcF6DcjXZdatHis37yabCHfnfUgGj03bY9BtR3POF79PtmFQfP3VPr/g89L0w
aWSFByjbyFyKLCP2HJ16lkXiC5toyl3sqWN5qhVyQXXNnfW8dFL9NbIq9MNM7GiO
Z/2k+ppvRFU4HRyRkqVFXu4mLJ5SVCDBBUcdz1ehZCZ+0CwtFHodRwepNrAzH4H6
JmZInJhn4F0kM7zOZvTJlG6E3KYimMQux7VulsbLngCwkNFvYpL23xAlGskwf1xS
12Z4KNBAG6V1USb5Yn9pvsxZ34c1SPs/fwgs/aZDa/mwD0LWvdrWkCPXvWo9K8Vu
CwsBhKvwzVzYf9GZ05pba0m2rNVW7SvfVbwMH/1+yBC7eQIfgSBVpikpxLmxQ8Fc
Rfgg75JYvcBSgBJAMfv7nEuYQeKjwQ7JABlOZ1HCXxkz1tc1LA/H7o87+wSVqSaz
9NtjcP5kp3Vyhe9EvsfOGpsbFbTOxJel9rCVZieZD441V6Ml76CO/YkCHAQTAQIA
BgUCVQ8QmgAKCRCHkkGlAqaYCn5kEADjKwrgKF+PrqXWceyNIa4JkVR4tZ2AMm0J
TCHU2QL/svmt99YRHCmIRcId0lLwjQVf5ujG+t5TfUSn876AZF/LnIjTqsMEcNf+
CAfuKak36OODLywf25fW2b69epUSpYBeZHmrnZbKVI2aqo4UR06MZJOOBbp4dzn4
8vIIIp0V2N2sSj9FnuDXEJ0D8nbSFyY8lW7z8zpWMcCBVOKxQLYkfkcZ9l76F3Xc
z7F4OdFuj2lveGmfH4Pu5lBECFlecxvMm2wkZY+e0l9SNBk5i2GRuKjNjubgTQD3
YW1olAJvhKJoUnHG28+rrKM/qX1UoylJoS66kW1ecGmlqkUAcK3mkk/CUeSigPxD
P1kWAS2iGt9QVVMuV9bgS0xzNbbxOcvGjru5C1ZWOFZj81bJmL6mv7ceL5JLX//1
3Q210XxrcFo0U9xmAKfcA4iX91xxC+o8WTBRbXhV3UGL0yyeLz5PsDBmbo2IGC+u
pJyOLjDkjmj1R0QaWWKL+6BoDWFBm6f6tqbRGyBObu90HBCUeA1CovY38VALg8zQ
tjw9h541g5wT5g0sxDcF6VmPHiiba3AED/aBbaWbQ1VNa7ujbEN/tYwVpfP1V6Qn
i46lPT0dtWJv3TU2vaJ1xgPHmBgFkC/OlM+637OcsankJKdFghRTgV8DLP4XG3R8
Ved+4S58FokCHAQTAQgABgUCUyW3qAAKCRCRDlzUdsyMyfeJEAC6/lKLKR5rPYxZ
3fe4V6Q53vs1h2PUC1BBaNg6s54BJtRP9sdBsr4lv1OyisCgKzCwdqDXWi9RtH/b
xQDNwXaibKpAy0ju61WEHl6WiHvkRAlUb/DHm8R2mN96hn4J+L2gbgG0vWBPChXD
H2yWE3zLqKjfMPQmG1+8g8QOIDE97Z19VSK1MXpgThNggXBWbH5n7d062olm11/d
XZ5R3JIRi2V1xgW2ozxq/inoSqLy824krEcpACkhEgVF05KIc9xfyagDpOGO+ytG
FUfOqnr8Oix+QF10CxDyFRugkzSt73s0XQ+a/7ke2Y4olGRquHaaVC+66zKdyEEo
k8Y6P3P0cVbHoXm8TV2SPE89VF6+v5OBG2XK3Dc/1kMeHtVjJipA9Om6ZT32Pehz
szJ/DsVZCA7fmJZPOrEYR4PYyKcgOHTkbx22yt77qIosDHS3YpxNolm3y5VsxkYw
CaoodQorF42TEmzVgKAwYPrCoeWwom+sgWHRVUKifu5aw1y6oFB9UnSLiQT+v+aq
pCNtdBh+2pOkUICjjd8NSxuHArbLDcW7Xr9vSniCmp+AMAcHK4nwGKCIpLXMhPJZ
Rumd5E9iclC1GETETnrRkRhcqPNShGvjA8Hmwi+8CWl+THbsLxLVlOA4ceuLEq24
FR2YPiH7GK6wZfL53HRdtHFc/yw/xIkCHAQTAQoABgUCUyhUqQAKCRAFzM+Hrl/H
EsWCD/9ePJfTsaqsKXztiK+pd1MZX98sDSbQeT/G3PP3qlanyk+MyPKxDwm6by3R
fvEVhNtZt76y69dQ54weSpvgyVU0YoTBd9zaxrnp6UZ6XLHE6VBh16XsUNimPRAg
bzG5p3wX83Wc/uuiSKthW4galSaA9sgaO43k9fbfiDun3Tb2zSKn/0ujJenXYSjx
ejUgiUHiFvn2h6WUKoSkGGWjna27F/cNQB8xHphhCqUYivIpz/pAZhXaadGuqNIl
RkYWXdTdZVnii0gM6tti1+qU4eKErkrgvmDJoNPjpOdwVswcQTJuBWkkmeplS1hM
J3BbbFUr4LQBQo5RmJM9j0jDSf8kMmpZKsIA8N+D7JBppWZHzKdBG46eyOLdMEj8
3rbkzNmnvDG8qmRrPCFaBBHNjXh6xjHgCK6+C+bRD+lJnvgvyq/RPTUoCGoNvIrS
laCeX0TheFu7sJE+YyHkiaQu5Y0bXL5V0AeIu01VHUxoeKWPlaaZCxytBTiD9O6E
Srv+O19Npe1CFtOWyVzvr0bBCtj+YKUsZFbK2LWCYeNGPMAWe9YKdjE8eqFF6RtR
EBlRNmL3KiQwQjpSpl2RHYLgFTQ/iDfKRtQEhUYysgjNBzEaa2yHYGGb7o1ufsrd
dnqXLSyP/ouewb+b+kPVmyE3Sp4yrsZlebhOtDbC626o1URro4kCHAQTAQoABgUC
UymNDgAKCRDjdyVHGYURZnDwEACtknkvjXYT9+TrK6BAmgsd0uOi2cZbJAG+J+nO
yDegva5ko49f3s3F4crQ6DBEPyFQD4ey1hVwX5P1uGL/3DGaUYlWrcZvIqGY56D9
ubhTJXnhCCfqgzsasxV//sW9t/SvOvC9+IgoiKSwuLHc560jqXhzVyvFbU7zbEzI
azzhf5ZnEPvmo1RJsbduAs1TTwMg52TluoboWGtJOu6MCaXBeTQojRsaMwBd7ZlG
lQqq5DI1JPGSi0PW1jey2BNkUYMSusoSQsBjYDpo9ZA9urIRrMamryg43eDoeqOk
iGGSZaujy3W3xOTUH7ZM8S24nl9RQtzmMtofVEJeyXE5YaMyQvlsDajWEs1IYZ50
tob72jE1co/cnoa/e8RQ/xcbbeB5uekjhzW1cWSckgeYCS5bI6UvQ1wJzc0dJIDW
sOP6mWDu35lWVoKFSAN/7nVuVy/piDUNWAeAHIL/qhdanS5aVaLzRiTySewkcgf8
9YfUb8T6suBDda7OYEFn+fpzwRaciyCtPQw5UIe8TWPSXsDIISsubFXuPOFLq54b
WvOSnrE7lUeRlixgXLSligAgBLt0BELyrB5Jgkg5vbj7lOMBwKFwkkm8yn25JHTE
2c6KDHTRUe87M47m2Q4oyLovfdg+690LCkXImLM0KMpynAtAr/ifT6A6Ww5sRTvS
wEx7l4kCIAQQAQIACgUCUyc6IQMFAngACgkQe0r/97MeQzDh8A//X+Yc9B4lPcfG
YTDxtykCha0mbmxWCH2HeFKVinAOMD5I0UglDo++kIUa7WhkYBRTGkcTwzdZGe88
jHO5tgCA0Rr6VwldHd5L14wM8NuK6yVJkJ6erUMTfDJm8fY1aUYdW8XaceXCLNRb
tYyrOkbogPy4n4Z5hs0Bhq+9S9fR7xymndKYZJo4ceOn2cLemtJOXLKxBu0fCKPJ
lXlxZhV8lc1IaUZtgcavpg9+r5EGbwGQrhNBlswyisWGCK8MuttgzZNAyoSvoQFm
b7J+pcYi1QeCzc/JYCFf9uVl4f+UxUAUHyt0isHPR6aNS3QL9PW12WLcYLAJZKSH
zLX2R3wfFiN8pr3fex65WxyT13HmVLlvfI4gXYr5I8XKocJ/56ql0KjmMX7n4jkg
PARrprbv0rRgcLFyo5K3xBDiiugPA2Ta1JWy0g9bXmyawNwgcf1raSFCAOfpPIJH
QhVnMQtiyW5NmtfdQnDaK1vYfvcsdx8SRsO9EcfIjvmv+TIV5RyJKyWaoyu3l+oq
SwHF1P0+FfGlqPkgAZbICIBOosjdjbUO7pHw6pgI/St6VqkZNUm6NWns6iuuE2yQ
AwbTKWbtZBxCuxg6ruACRHP8S7P14j+ob0uEAsW7vzcJU3ed5Vwj5eXSNO5S+w9D
CPM0kDA1AxEVuiQOnnKms9WkvSoIhVyJAjgEEwECACIFAlMeHxgCGwMGCwkIBwMC
BhUIAgkKCwQWAgMBAh4BAheAAAoJEFebNK/earQ5gdMP/igQSonn9JKG4nR0JsvD
c9+ugQnTGdJW/OWNGD6ICGszrVWEhKWCcgplxppICDvMfOOqGnvVjPfU0DhK94TB
mCGt3t0TS3aURa075rufwl3C3nhuVlX8BcU+t6R5U0tsO8TwEXg5+5mX7+nBAffh
8C3tKKgcHX+xFSPT+x0SpjIT5t5z/GKxIMFnrA7HmmuEDjVEmVOggHDuAhKLZv83
To9IKfPja2i/H+Dr+x+JO0Twi7rsN5QX3/47BaDhNNBdmLrRoOVPOkSYdze374V4
T3Y41r+yeohTstozSkKkvqQ1jm8Vt/FQCiHEsfA5LJzzEaVBve+kMkCf31VocdKo
Le1s8m/+RB1vF1FtR7dIB8ff8XyNfTLskjGtUzI0uDjCWds+GaPLExeV3840RRyV
3VLqbgKgMcQ1mM6wJhppSYGCJTqlgHoenZYYhLrbjK3G2aMdAiNbOWKEmE7Aexl0
saRN58MfJoI2HgEqlrOAQt8BZp67zxOfq8ao2ETBd5TQzpMleww/09eE+S+Ea5Bd
vPW7dwVVcdK1enqiJc1cB6Z2kqpE9RtwAlQ3OJXTioDWv+b+FGGnjffxcBDbWROS
94NuskokRZPGlRPZIWhDs4k6i8dYmbxz6ftcmmn3FHaJ8AI7g/4n1ORwhiPgab+V
plp3EQg6cWYcJKD3/n1lmbX5iQSxBBIBAgCbBQJUmH1plBpodHRwOi8vd3d3Lmpl
bnNlcmF0LmRlL2ZpbGVzL29wZW5wZ3AvQTRGRjIyNzktY2VydC1wb2xpY3ktMjAx
My0wNS0xNy50eHQ/c2hhNTEyc3VtPThjODU4MmYyNTI5OTI0ZGQ2OTI5N2I3NGMz
NDBhMGEyOWExYzFkNzViMTgxYmZmNjAyZmRkZDc5ZTdmMDQ5NjQACgkQTh95mqT/
InkAhiAAtGnKafFV5GIPsy5/qnZipA2y1gXJxKJTXoDVfRdkDvl1+RClJ367cHsg
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
sydu1DPPyxrCkFybcJmwqL7mYlhdG9G8PjuuzV/+NByJ6raVGXmqC1ygJ9O3D7R2
u+R+JciOluiBAyDNqO9BqRMqcmZj6irMRf9PVV5ptdhXfXFEzYKRtsScWAIvUIN+
7qRgvMe3UVfqJMRqdqnvFS//GpSfpSAkocpE3mWTipeqOhxQrxDwvFfWon3Egri3
XHvdBsH6Uxma5o0uplhUlMs7IPxQ+Wsp99wbFu01oIQpps7PTEDNTW6pv8cuEy3J
Fl+V8Z5X7MhYgpwLgXc6FlnEI19+nlqMpqQ9aFnbS7GTMgqwiQ+tTb0pfdNnypWh
n6oDsw8ykdtHpzonPudv/o8SLMNYRYXhNPZq4aUi/t1ssxifisdC9MruE6iDWnJU
2d0c6WRudrcKCWNfSY68sGAs7mrX+vDmYkD52uGIIJ4+qmDsekCB31pGGvjOeho6
mZMrY2iKnBeFivbbVJGTiOdh6k156RjsyT1HraKWFt3/ssqHGUX6HHz0KgpdJStY
KbcDWuUuBMPzPt06oMR7XBWhitoJH09wMgUgFxYrsGR16aWemptTkbx+0psTt+pL
+1hKUBuJAhwEEAECAAYFAlMnXb8ACgkQDFzJN7BCRWbSQA//b0JreTE5NQ9hhXap
7kXuo0Vryc/hOvA7Qbi8uwOEVgl/Sdlr2AYyXdFN+uszybU7vPvswyBn9mo79f+y
F3XgucPWTOmvSRfZxhGhvFyJ3mCNVwpziw8yD3EV0EXKVgu52rzyDoKAPbbJB6Kl
l4nzkbcYJVtAEnrbDW/CyvyoztjxrWwIs0ULVFOrc9SQ/EqtnTQL25UZGs2iTtDP
qwyESLYukmifthZQVPg8wJM0iKG8kcqNWa5AU1IVF5mSf+LFrDNNab8TWUlSaNlv
WeTWPR6CHJbnpvJ36PDphmcisAgHeHXoPtfzVoU2u/TWZXToMdBuQ/C5UBrBxSU5
Zik7QqCtVlqu4X8a5VtYbbPeKSJ4lxBoyrsUP8oPuTJx6dqwqi1rIjbpM14pMfQU
T8rYNGEAro/6wkvAFFVU6lKiBJrbJD/1O1gC8qFU07CasbOpmAxmJDkdMcG4tvNV
ZSMuZ3hMemG/Jw36JUB3HdBuqcKyivMu9Xp0OmOR96/3QoXjPeEVM9Is+qGKMeP6
wjWuX7Iu0VawLVq1pCVi+b9wvOVe846q0d3Fv8cLbolT51XCh+p1IoYcrPVGNtFK
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
jqKZJOk9dZZjbVT18ehXJ+S7gSP4KQQ+zN8k+XNvNiEGa0/VcP87K0bcjCxlcHb1
eA46KA9YDgpmluJSuh/2PmTprrbOfIm1edz26CKe3Sgh/AzGudcbzRw7/5vNEtdC
31x3kBb9M4t34h6aQvdODYOXyo1/KsuVF7fff/c7+fHXlEvq+ikTqVEkjxO2GMfQ
zsAVrEli4il3ScVphbt34u0mFVsJA1vza85Ed/L1jdJpsTuSjjRgiQI4BBMBAgAi
BQJTHh8qAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRBXmzSv3mq0ObhM
D/4w7698tSodpjiUrW5LPlEYYUfhBDdhLIJjD1Y8NlECBOlvdf80UKfo05VWMZL3
C8PYbH5SMmRnIuIf3t82foNVNaKjJInEZXdtml+miHzjdp5rdnvHBeY+RN8UlFTf
lHClYQE+/vusR5Oo3AZFVy+h466m/R8JjvA2ZGBiePlp9xilzBlMOku0hmxe7IoS
2LMsztWoI/nYoG8FWT5sm9juhZFHsWw9NZ+bBNChNbQUZ07BK44wAIsa/dBl2jTq
Yc0ED1UjSl9YT7u6vUflkcJ9MpnPsXqyR2GStE2+qRHFgbrM/ClsPw6DKGnSZ0QP
Rsi5DmU7n5l3P+4DfBPaFahLXbeAy3BP+lizqexqjHZqctQhNJ0u/gPg6b3e5w7V
N0Vri1U+qrDb+PkeeO40PgCTRhVQGEusovI+/boNA2KP97RtuMS23+IWimIFK9lY
ZB3ZDgYRh8vqaiG0kws0Exc39wBxKhgRp6hwPVYd+cu09KcnxwydsQ8cbi5u2Esy
/NmAYI7iixhD81pvYEmhI7ErIRxnf//sAZsoGxnLd0Paqo1O3Y0G1KaumU2dYsQe
uEeK7vQevq9a7/kX+yzm5sb5tYzyK5RW+z6RZg7BfcC7CifTv/SccoYNEK22vkZ0
TbEyWN+upuA4H4PAUd7kYWKEE1Ct9LyFfrsDPoGy24f0TYkEsQQSAQIAmwUCVJh9
aZQaaHR0cDovL3d3dy5qZW5zZXJhdC5kZS9maWxlcy9vcGVucGdwL0E0RkYyMjc5
LWNlcnQtcG9saWN5LTIwMTMtMDUtMTcudHh0P3NoYTUxMnN1bT04Yzg1ODJmMjUy
OTkyNGRkNjkyOTdiNzRjMzQwYTBhMjlhMWMxZDc1YjE4MWJmZjYwMmZkZGQ3OWU3
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
KY0OAAoJEON3JUcZhRFmv/sP/AzS70FQSWTEgYzgTjz4XPMZdXzymTMtjVqFt/t2
9eqWpDHrfgLhD49bYXLtWRtP9fG6xIDpdbzjlGKMzPjHffejwttKXpmF5tZx9x7z
zDeKKN/ySaPnVt8m36NftNgnHzhlOHKRd+ckyGn1UAN98LaG08KyrJrKCXxaa1GU
ZarPrSoyii0fhezyOpjqp6FLQ9c0woxNgfLacMrfHnGjvmYZ3D2Pg8o/DidcEVAH
c0pwylIXotbVY7lzS9lbsG/tFS7ltdaMqqXoOZF/imfthguuhtN4ogh1Rpf3JX/7
B3RevSABWGnFvc5I5cqWQ8JJbu+vM8cakUGKQ9vAZ7pyR8p4eIWdTOZ0P7hbTIaO
K9wB7FCBRFojWhFeYiFeMbFI84cepKIR8qmq4ZCAdOw03AYHN3FRX7zcxLsNC8+c
C6hx8EVmUWQg5zHwhDleX+LQL+/T3KIfovrEkWHpDpByQvgXjp5kh1xB4cE/7XNM
4XV8twX1H7wkO4Ab80kNDB3ndHz9M9j/fbYyfjAkyVKI+QN/DRJfWJo3iWbdKX+D
3N7AGdRkvmt7vRpPF87otp62nAgSiHCOWGMYIAR2Oy3CENpCDYNA/IKpq7zBFmXe
ZJ0nsWSKSks333ww3XsCSyP0Hx/fvCwUzJfWW8MIkn/nPatqDM7tgkOaWA3kmT3Q
iE9fiQSxBBIBAgCbBQJUmH1plBpodHRwOi8vd3d3LmplbnNlcmF0LmRlL2ZpbGVz
L29wZW5wZ3AvQTRGRjIyNzktY2VydC1wb2xpY3ktMjAxMy0wNS0xNy50eHQ/c2hh
NTEyc3VtPThjODU4MmYyNTI5OTI0ZGQ2OTI5N2I3NGMzNDBhMGEyOWExYzFkNzVi
MTgxYmZmNjAyZmRkZDc5ZTdmMDQ5NjQACgkQTh95mqT/InlpIyAAzm+tgl9Rwxmf
RpV68k7F3T6crd98IAeRceJNoHSlF2/YzndTkWG0CS01aJNNLq5PU3dG4ml9zX+R
sC1b0M7t+hx7m+Fc2jRk1G76pvzGnDMcaoYby0nnKw+PotQahB03BBQRc9aOPprF
3rXCWhAubkHhoUjcdLhgDvvbRW5fkn55rrQb4Ne5tGuH7jpTthzbQaeFUpiU4rfR
qb4ds3iyKusoKktHEQ3acnVwjqG4NdT+OqSAjsL+KzKTXE2eM1cGSYBUKbzmbpOk
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
bGljeS0yMDEzLTA1LTE3LnR4dD9zaGE1MTJzdW09OGM4NTgyZjI1Mjk5MjRkZDY5
Mjk3Yjc0YzM0MGEwYTI5YTFjMWQ3NWIxODFiZmY2MDJmZGRkNzllN2YwNDk2NAAK
CRBOH3mapP8ieeSlIADCQCJhObSTpW+xzlyrFv8+qSdYscU5FJwxr/rt+kGwiJg1
yEW7GptdC0xVA1e7Uaeszsu9TDaOt7r2TKR5ueojeHjSrLFo7MsTFFZKZso/Wemc
rqKfk8Xr9Ywl2/TATnd2nWDqVUwmfetuQVt4ZqdroglLLRp+miR9Qrs5syVkQaPF
Xj4VyY+Pe6hL79/yt2l4si4Icthy2p1U0ehOYU/oRUmQbEEKUHPs3SIGdqnvI/u5
wWDECaywNZVeqptGglviz6wLBOTzz/4H+HiUc70x3o0PYycNCDd9LxglanlQxfG6
tuYBkcM3mDNGne0NKJQ41Mwr6+cysc1T8PZB4Tsr2nqn6jeGwiBa8lmQq5kxPvFg
47Dsid+WfPYvopHa31gAmpurory/b61sxMEidhf1z+VxlXqc3wjVjrmreWbbWnop
9xmPKJ9wvSYT7Wr4euaZE1a8GT2Flz+C5iAjnouxUERGUN0YPTwRq52PX06MY0gJ
DZI5vMTbsuYzXotaNUIxOk0u9KFREHFigG8dg0WWFIT6WPdaFEsNBAU2FZrHscDY
sVx3lMVIKVcvdyUIvjugHmYy89JeSscFRoXjXBuzGcN4jdIRXecHitgQTGwKWciC
jTSAPTOuzvUyhv7l55aHfiF2ZNnsveQO0Dr+bhyth0nBJVjN03KUVfxq0yUjTqbT
TV8bSXK2449NM+mj4/YdivITu8L7PqYtwvZbjNGr2XTvj1G9MYPpqqIvygq4ysWY
0M4baE27OjVlaC4jb0fTCvJXt5GqHcXMFSD1pN7Y3yX2vbmHK5WVhRiRvml+lB2O
IiYSYHRhPKd3gtyIsrR3Ge/67nuLWuxl4p5rIkO1NJfnaNWohZVaW34eWZuq4gHY
5W2/2bE+NCkVb9n1BSKzVEG7AHEcIzudD9ECURs5Ngbir1c3M+mLfqzmUcYvO0o/
qsn3ixf/kcvWVWwpK/bxnhcGsUK0omgs3YzHxWdFN/cgPJ+681/ueTJCv2m4slPQ
peDNvIIjC8vxaYOU4gG+aq6zN05688JIR9LEYxJajTdHjBBkEWwhrVPzTo+BMGbQ
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
JyKY
=fQZp
-----END PGP PUBLIC KEY BLOCK-----

     Repo Maintainer <repo@android.kernel.org>
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
cZ7aFsJF4PtcDrfdejyAxbtsSHI=
=82Tj
-----END PGP PUBLIC KEY BLOCK-----
"""

GIT = 'git'                      # our git command
# NB: The version of git that the repo launcher requires may be much older than
# the version of git that the main repo source tree requires.  Keeping this at
# an older version also makes it easier for users to upgrade/rollback as needed.
#
# git-1.7 is in (EOL) Ubuntu Precise.
MIN_GIT_VERSION = (1, 7, 2)      # minimum supported git version
repodir = '.repo'                # name of repo's private directory
S_repo = 'repo'                  # special repo repository
S_manifests = 'manifests'        # special manifest repository
REPO_MAIN = S_repo + '/main.py'  # main script
GITC_CONFIG_FILE = '/gitc/.config'
GITC_FS_ROOT_DIR = '/gitc/manifest-rw/'


import collections
import errno
import json
import optparse
import re
import shutil
import stat

if sys.version_info[0] == 3:
  import urllib.request
  import urllib.error
else:
  import imp
  import urllib2
  urllib = imp.new_module('urllib')
  urllib.request = urllib2
  urllib.error = urllib2


home_dot_repo = os.path.expanduser('~/.repoconfig')
gpg_dir = os.path.join(home_dot_repo, 'gnupg')


def GetParser(gitc_init=False):
  """Setup the CLI parser."""
  if gitc_init:
    usage = 'repo gitc-init -u url -c client [options]'
  else:
    usage = 'repo init -u url [options]'

  parser = optparse.OptionParser(usage=usage)

  # Logging.
  group = parser.add_option_group('Logging options')
  group.add_option('-v', '--verbose',
                   dest='output_mode', action='store_true',
                   help='show all output')
  group.add_option('-q', '--quiet',
                   dest='output_mode', action='store_false',
                   help='only show errors')

  # Manifest.
  group = parser.add_option_group('Manifest options')
  group.add_option('-u', '--manifest-url',
                   help='manifest repository location', metavar='URL')
  group.add_option('-b', '--manifest-branch',
                   help='manifest branch or revision', metavar='REVISION')
  group.add_option('-m', '--manifest-name',
                   help='initial manifest file', metavar='NAME.xml')
  cbr_opts = ['--current-branch']
  # The gitc-init subcommand allocates -c itself, but a lot of init users
  # want -c, so try to satisfy both as best we can.
  if not gitc_init:
    cbr_opts += ['-c']
  group.add_option(*cbr_opts,
                   dest='current_branch_only', action='store_true',
                   help='fetch only current manifest branch from server')
  group.add_option('--mirror', action='store_true',
                   help='create a replica of the remote repositories '
                        'rather than a client working directory')
  group.add_option('--reference',
                   help='location of mirror directory', metavar='DIR')
  group.add_option('--dissociate', action='store_true',
                   help='dissociate from reference mirrors after clone')
  group.add_option('--depth', type='int', default=None,
                   help='create a shallow clone with given depth; '
                        'see git clone')
  group.add_option('--partial-clone', action='store_true',
                   help='perform partial clone (https://git-scm.com/'
                        'docs/gitrepository-layout#_code_partialclone_code)')
  group.add_option('--clone-filter', action='store', default='blob:none',
                   help='filter for use with --partial-clone '
                        '[default: %default]')
  group.add_option('--worktree', action='store_true',
                   help=optparse.SUPPRESS_HELP)
  group.add_option('--archive', action='store_true',
                   help='checkout an archive instead of a git repository for '
                        'each project. See git archive.')
  group.add_option('--submodules', action='store_true',
                   help='sync any submodules associated with the manifest repo')
  group.add_option('--use-superproject', action='store_true', default=None,
                   help='use the manifest superproject to sync projects')
  group.add_option('--no-use-superproject', action='store_false',
                   dest='use_superproject',
                   help='disable use of manifest superprojects')
  group.add_option('-g', '--groups', default='default',
                   help='restrict manifest projects to ones with specified '
                        'group(s) [default|all|G1,G2,G3|G4,-G5,-G6]',
                   metavar='GROUP')
  group.add_option('-p', '--platform', default='auto',
                   help='restrict manifest projects to ones with a specified '
                        'platform group [auto|all|none|linux|darwin|...]',
                   metavar='PLATFORM')
  group.add_option('--clone-bundle', action='store_true',
                   help='enable use of /clone.bundle on HTTP/HTTPS '
                        '(default if not --partial-clone)')
  group.add_option('--no-clone-bundle',
                   dest='clone_bundle', action='store_false',
                   help='disable use of /clone.bundle on HTTP/HTTPS (default if --partial-clone)')
  group.add_option('--no-tags',
                   dest='tags', default=True, action='store_false',
                   help="don't fetch tags in the manifest")

  # Tool.
  group = parser.add_option_group('repo Version options')
  group.add_option('--repo-url', metavar='URL',
                   help='repo repository location ($REPO_URL)')
  group.add_option('--repo-rev', metavar='REV',
                   help='repo branch or revision ($REPO_REV)')
  group.add_option('--repo-branch', dest='repo_rev',
                   help=optparse.SUPPRESS_HELP)
  group.add_option('--no-repo-verify',
                   dest='repo_verify', default=True, action='store_false',
                   help='do not verify repo source code')

  # Other.
  group = parser.add_option_group('Other options')
  group.add_option('--config-name',
                   action='store_true', default=False,
                   help='Always prompt for name/e-mail')

  # gitc-init specific settings.
  if gitc_init:
    group = parser.add_option_group('GITC options')
    group.add_option('-f', '--manifest-file',
                     help='Optional manifest file to use for this GITC client.')
    group.add_option('-c', '--gitc-client',
                     help='Name of the gitc_client instance to create or modify.')

  return parser


# This is a poor replacement for subprocess.run until we require Python 3.6+.
RunResult = collections.namedtuple(
    'RunResult', ('returncode', 'stdout', 'stderr'))


class RunError(Exception):
  """Error when running a command failed."""


def run_command(cmd, **kwargs):
  """Run |cmd| and return its output."""
  check = kwargs.pop('check', False)
  if kwargs.pop('capture_output', False):
    kwargs.setdefault('stdout', subprocess.PIPE)
    kwargs.setdefault('stderr', subprocess.PIPE)
  cmd_input = kwargs.pop('input', None)

  def decode(output):
    """Decode |output| to text."""
    if output is None:
      return output
    try:
      return output.decode('utf-8')
    except UnicodeError:
      print('repo: warning: Invalid UTF-8 output:\ncmd: %r\n%r' % (cmd, output),
            file=sys.stderr)
      # TODO(vapier): Once we require Python 3, use 'backslashreplace'.
      return output.decode('utf-8', 'replace')

  # Run & package the results.
  proc = subprocess.Popen(cmd, **kwargs)
  (stdout, stderr) = proc.communicate(input=cmd_input)
  dbg = ': ' + ' '.join(cmd)
  if cmd_input is not None:
    dbg += ' 0<|'
  if stdout == subprocess.PIPE:
    dbg += ' 1>|'
  if stderr == subprocess.PIPE:
    dbg += ' 2>|'
  elif stderr == subprocess.STDOUT:
    dbg += ' 2>&1'
  trace.print(dbg)
  ret = RunResult(proc.returncode, decode(stdout), decode(stderr))

  # If things failed, print useful debugging output.
  if check and ret.returncode:
    print('repo: error: "%s" failed with exit status %s' %
          (cmd[0], ret.returncode), file=sys.stderr)
    print('  cwd: %s\n  cmd: %r' %
          (kwargs.get('cwd', os.getcwd()), cmd), file=sys.stderr)

    def _print_output(name, output):
      if output:
        print('  %s:\n  >> %s' % (name, '\n  >> '.join(output.splitlines())),
              file=sys.stderr)

    _print_output('stdout', ret.stdout)
    _print_output('stderr', ret.stderr)
    raise RunError(ret)

  return ret


_gitc_manifest_dir = None


def get_gitc_manifest_dir():
  global _gitc_manifest_dir
  if _gitc_manifest_dir is None:
    _gitc_manifest_dir = ''
    try:
      with open(GITC_CONFIG_FILE, 'r') as gitc_config:
        for line in gitc_config:
          match = re.match('gitc_dir=(?P<gitc_manifest_dir>.*)', line)
          if match:
            _gitc_manifest_dir = match.group('gitc_manifest_dir')
    except IOError:
      pass
  return _gitc_manifest_dir


def gitc_parse_clientdir(gitc_fs_path):
  """Parse a path in the GITC FS and return its client name.

  Args:
    gitc_fs_path: A subdirectory path within the GITC_FS_ROOT_DIR.

  Returns:
    The GITC client name.
  """
  if gitc_fs_path == GITC_FS_ROOT_DIR:
    return None
  if not gitc_fs_path.startswith(GITC_FS_ROOT_DIR):
    manifest_dir = get_gitc_manifest_dir()
    if manifest_dir == '':
      return None
    if manifest_dir[-1] != '/':
      manifest_dir += '/'
    if gitc_fs_path == manifest_dir:
      return None
    if not gitc_fs_path.startswith(manifest_dir):
      return None
    return gitc_fs_path.split(manifest_dir)[1].split('/')[0]
  return gitc_fs_path.split(GITC_FS_ROOT_DIR)[1].split('/')[0]


class CloneFailure(Exception):

  """Indicate the remote clone of repo itself failed.
  """


def check_repo_verify(repo_verify, quiet=False):
  """Check the --repo-verify state."""
  if not repo_verify:
    print('repo: warning: verification of repo code has been disabled;\n'
          'repo will not be able to verify the integrity of itself.\n',
          file=sys.stderr)
    return False

  if NeedSetupGnuPG():
    return SetupGnuPG(quiet)

  return True


def check_repo_rev(dst, rev, repo_verify=True, quiet=False):
  """Check that |rev| is valid."""
  do_verify = check_repo_verify(repo_verify, quiet=quiet)
  remote_ref, local_rev = resolve_repo_rev(dst, rev)
  if not quiet and not remote_ref.startswith('refs/heads/'):
    print('warning: repo is not tracking a remote branch, so it will not '
          'receive updates', file=sys.stderr)
  if do_verify:
    rev = verify_rev(dst, remote_ref, local_rev, quiet)
  else:
    rev = local_rev
  return (remote_ref, rev)


def _Init(args, gitc_init=False):
  """Installs repo by cloning it over the network.
  """
  parser = GetParser(gitc_init=gitc_init)
  opt, args = parser.parse_args(args)
  if args:
    parser.print_usage()
    sys.exit(1)
  opt.quiet = opt.output_mode is False
  opt.verbose = opt.output_mode is True

  if opt.clone_bundle is None:
    opt.clone_bundle = False if opt.partial_clone else True

  url = opt.repo_url or REPO_URL
  rev = opt.repo_rev or REPO_REV

  try:
    if gitc_init:
      gitc_manifest_dir = get_gitc_manifest_dir()
      if not gitc_manifest_dir:
        print('fatal: GITC filesystem is not available. Exiting...',
              file=sys.stderr)
        sys.exit(1)
      gitc_client = opt.gitc_client
      if not gitc_client:
        gitc_client = gitc_parse_clientdir(os.getcwd())
      if not gitc_client:
        print('fatal: GITC client (-c) is required.', file=sys.stderr)
        sys.exit(1)
      client_dir = os.path.join(gitc_manifest_dir, gitc_client)
      if not os.path.exists(client_dir):
        os.makedirs(client_dir)
      os.chdir(client_dir)
      if os.path.exists(repodir):
        # This GITC Client has already initialized repo so continue.
        return

    os.mkdir(repodir)
  except OSError as e:
    if e.errno != errno.EEXIST:
      print('fatal: cannot make %s directory: %s'
            % (repodir, e.strerror), file=sys.stderr)
      # Don't raise CloneFailure; that would delete the
      # name. Instead exit immediately.
      #
      sys.exit(1)

  _CheckGitVersion()
  try:
    if not opt.quiet:
      print('Downloading Repo source from', url)
    dst = os.path.abspath(os.path.join(repodir, S_repo))
    _Clone(url, dst, opt.clone_bundle, opt.quiet, opt.verbose)

    remote_ref, rev = check_repo_rev(dst, rev, opt.repo_verify, quiet=opt.quiet)
    _Checkout(dst, remote_ref, rev, opt.quiet)

    if not os.path.isfile(os.path.join(dst, 'repo')):
      print("warning: '%s' does not look like a git-repo repository, is "
            "REPO_URL set correctly?" % url, file=sys.stderr)

  except CloneFailure:
    if opt.quiet:
      print('fatal: repo init failed; run without --quiet to see why',
            file=sys.stderr)
    raise


def run_git(*args, **kwargs):
  """Run git and return execution details."""
  kwargs.setdefault('capture_output', True)
  kwargs.setdefault('check', True)
  try:
    return run_command([GIT] + list(args), **kwargs)
  except OSError as e:
    print(file=sys.stderr)
    print('repo: error: "%s" is not available' % GIT, file=sys.stderr)
    print('repo: error: %s' % e, file=sys.stderr)
    print(file=sys.stderr)
    print('Please make sure %s is installed and in your path.' % GIT,
          file=sys.stderr)
    sys.exit(1)
  except RunError:
    raise CloneFailure()


# The git version info broken down into components for easy analysis.
# Similar to Python's sys.version_info.
GitVersion = collections.namedtuple(
    'GitVersion', ('major', 'minor', 'micro', 'full'))


def ParseGitVersion(ver_str=None):
  if ver_str is None:
    # Load the version ourselves.
    ver_str = run_git('--version').stdout

  if not ver_str.startswith('git version '):
    return None

  full_version = ver_str[len('git version '):].strip()
  num_ver_str = full_version.split('-')[0]
  to_tuple = []
  for num_str in num_ver_str.split('.')[:3]:
    if num_str.isdigit():
      to_tuple.append(int(num_str))
    else:
      to_tuple.append(0)
  to_tuple.append(full_version)
  return GitVersion(*to_tuple)


def _CheckGitVersion():
  ver_act = ParseGitVersion()
  if ver_act is None:
    print('fatal: unable to detect git version', file=sys.stderr)
    raise CloneFailure()

  if ver_act < MIN_GIT_VERSION:
    need = '.'.join(map(str, MIN_GIT_VERSION))
    print('fatal: git %s or later required; found %s' % (need, ver_act.full),
          file=sys.stderr)
    raise CloneFailure()


def SetGitTrace2ParentSid(env=None):
  """Set up GIT_TRACE2_PARENT_SID for git tracing."""
  # We roughly follow the format git itself uses in trace2/tr2_sid.c.
  # (1) Be unique (2) be valid filename (3) be fixed length.
  #
  # Since we always export this variable, we try to avoid more expensive calls.
  # e.g. We don't attempt hostname lookups or hashing the results.
  if env is None:
    env = os.environ

  KEY = 'GIT_TRACE2_PARENT_SID'

  now = datetime.datetime.utcnow()
  value = 'repo-%s-P%08x' % (now.strftime('%Y%m%dT%H%M%SZ'), os.getpid())

  # If it's already set, then append ourselves.
  if KEY in env:
    value = env[KEY] + '/' + value

  _setenv(KEY, value, env=env)


def _setenv(key, value, env=None):
  """Set |key| in the OS environment |env| to |value|."""
  if env is None:
    env = os.environ
  # Environment handling across systems is messy.
  try:
    env[key] = value
  except UnicodeEncodeError:
    env[key] = value.encode()


def NeedSetupGnuPG():
  if not os.path.isdir(home_dot_repo):
    return True

  kv = os.path.join(home_dot_repo, 'keyring-version')
  if not os.path.exists(kv):
    return True

  kv = open(kv).read()
  if not kv:
    return True

  kv = tuple(map(int, kv.split('.')))
  if kv < KEYRING_VERSION:
    return True
  return False


def SetupGnuPG(quiet):
  try:
    os.mkdir(home_dot_repo)
  except OSError as e:
    if e.errno != errno.EEXIST:
      print('fatal: cannot make %s directory: %s'
            % (home_dot_repo, e.strerror), file=sys.stderr)
      sys.exit(1)

  try:
    os.mkdir(gpg_dir, stat.S_IRWXU)
  except OSError as e:
    if e.errno != errno.EEXIST:
      print('fatal: cannot make %s directory: %s' % (gpg_dir, e.strerror),
            file=sys.stderr)
      sys.exit(1)

  if not quiet:
    print('repo: Updating release signing keys to keyset ver %s' %
          ('.'.join(str(x) for x in KEYRING_VERSION),))
  # NB: We use --homedir (and cwd below) because some environments (Windows) do
  # not correctly handle full native paths.  We avoid the issue by changing to
  # the right dir with cwd=gpg_dir before executing gpg, and then telling gpg to
  # use the cwd (.) as its homedir which leaves the path resolution logic to it.
  cmd = ['gpg', '--homedir', '.', '--import']
  try:
    # gpg can be pretty chatty.  Always capture the output and if something goes
    # wrong, the builtin check failure will dump stdout & stderr for debugging.
    run_command(cmd, stdin=subprocess.PIPE, capture_output=True,
                cwd=gpg_dir, check=True,
                input=MAINTAINER_KEYS.encode('utf-8'))
  except OSError:
    if not quiet:
      print('warning: gpg (GnuPG) is not available.', file=sys.stderr)
      print('warning: Installing it is strongly encouraged.', file=sys.stderr)
      print(file=sys.stderr)
    return False

  with open(os.path.join(home_dot_repo, 'keyring-version'), 'w') as fd:
    fd.write('.'.join(map(str, KEYRING_VERSION)) + '\n')
  return True


def _SetConfig(cwd, name, value):
  """Set a git configuration option to the specified value.
  """
  run_git('config', name, value, cwd=cwd)


def _GetRepoConfig(name):
  """Read a repo configuration option."""
  config = os.path.join(home_dot_repo, 'config')
  if not os.path.exists(config):
    return None

  cmd = ['config', '--file', config, '--get', name]
  ret = run_git(*cmd, check=False)
  if ret.returncode == 0:
    return ret.stdout
  elif ret.returncode == 1:
    return None
  else:
    print('repo: error: git %s failed:\n%s' % (' '.join(cmd), ret.stderr),
          file=sys.stderr)
    raise RunError()


def _InitHttp():
  handlers = []

  mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
  try:
    import netrc
    n = netrc.netrc()
    for host in n.hosts:
      p = n.hosts[host]
      mgr.add_password(p[1], 'http://%s/' % host, p[0], p[2])
      mgr.add_password(p[1], 'https://%s/' % host, p[0], p[2])
  except Exception:
    pass
  handlers.append(urllib.request.HTTPBasicAuthHandler(mgr))
  handlers.append(urllib.request.HTTPDigestAuthHandler(mgr))

  if 'http_proxy' in os.environ:
    url = os.environ['http_proxy']
    handlers.append(urllib.request.ProxyHandler({'http': url, 'https': url}))
  if 'REPO_CURL_VERBOSE' in os.environ:
    handlers.append(urllib.request.HTTPHandler(debuglevel=1))
    handlers.append(urllib.request.HTTPSHandler(debuglevel=1))
  urllib.request.install_opener(urllib.request.build_opener(*handlers))


def _Fetch(url, cwd, src, quiet, verbose):
  cmd = ['fetch']
  if not verbose:
    cmd.append('--quiet')
  err = None
  if not quiet and sys.stdout.isatty():
    cmd.append('--progress')
  elif not verbose:
    err = subprocess.PIPE
  cmd.append(src)
  cmd.append('+refs/heads/*:refs/remotes/origin/*')
  cmd.append('+refs/tags/*:refs/tags/*')
  run_git(*cmd, stderr=err, capture_output=False, cwd=cwd)


def _DownloadBundle(url, cwd, quiet, verbose):
  if not url.endswith('/'):
    url += '/'
  url += 'clone.bundle'

  ret = run_git('config', '--get-regexp', 'url.*.insteadof', cwd=cwd,
                check=False)
  for line in ret.stdout.splitlines():
    m = re.compile(r'^url\.(.*)\.insteadof (.*)$').match(line)
    if m:
      new_url = m.group(1)
      old_url = m.group(2)
      if url.startswith(old_url):
        url = new_url + url[len(old_url):]
        break

  if not url.startswith('http:') and not url.startswith('https:'):
    return False

  dest = open(os.path.join(cwd, '.git', 'clone.bundle'), 'w+b')
  try:
    try:
      r = urllib.request.urlopen(url)
    except urllib.error.HTTPError as e:
      if e.code in [401, 403, 404, 501]:
        return False
      print('fatal: Cannot get %s' % url, file=sys.stderr)
      print('fatal: HTTP error %s' % e.code, file=sys.stderr)
      raise CloneFailure()
    except urllib.error.URLError as e:
      print('fatal: Cannot get %s' % url, file=sys.stderr)
      print('fatal: error %s' % e.reason, file=sys.stderr)
      raise CloneFailure()
    try:
      if verbose:
        print('Downloading clone bundle %s' % url, file=sys.stderr)
      while True:
        buf = r.read(8192)
        if not buf:
          return True
        dest.write(buf)
    finally:
      r.close()
  finally:
    dest.close()


def _ImportBundle(cwd):
  path = os.path.join(cwd, '.git', 'clone.bundle')
  try:
    _Fetch(cwd, cwd, path, True, False)
  finally:
    os.remove(path)


def _Clone(url, cwd, clone_bundle, quiet, verbose):
  """Clones a git repository to a new subdirectory of repodir
  """
  if verbose:
    print('Cloning git repository', url)

  try:
    os.mkdir(cwd)
  except OSError as e:
    print('fatal: cannot make %s directory: %s' % (cwd, e.strerror),
          file=sys.stderr)
    raise CloneFailure()

  run_git('init', '--quiet', cwd=cwd)

  _InitHttp()
  _SetConfig(cwd, 'remote.origin.url', url)
  _SetConfig(cwd,
             'remote.origin.fetch',
             '+refs/heads/*:refs/remotes/origin/*')
  if clone_bundle and _DownloadBundle(url, cwd, quiet, verbose):
    _ImportBundle(cwd)
  _Fetch(url, cwd, 'origin', quiet, verbose)


def resolve_repo_rev(cwd, committish):
  """Figure out what REPO_REV represents.

  We support:
  * refs/heads/xxx: Branch.
  * refs/tags/xxx: Tag.
  * xxx: Branch or tag or commit.

  Args:
    cwd: The git checkout to run in.
    committish: The REPO_REV argument to resolve.

  Returns:
    A tuple of (remote ref, commit) as makes sense for the committish.
    For branches, this will look like ('refs/heads/stable', <revision>).
    For tags, this will look like ('refs/tags/v1.0', <revision>).
    For commits, this will be (<revision>, <revision>).
  """
  def resolve(committish):
    ret = run_git('rev-parse', '--verify', '%s^{commit}' % (committish,),
                  cwd=cwd, check=False)
    return None if ret.returncode else ret.stdout.strip()

  # An explicit branch.
  if committish.startswith('refs/heads/'):
    remote_ref = committish
    committish = committish[len('refs/heads/'):]
    rev = resolve('refs/remotes/origin/%s' % committish)
    if rev is None:
      print('repo: error: unknown branch "%s"' % (committish,),
            file=sys.stderr)
      raise CloneFailure()
    return (remote_ref, rev)

  # An explicit tag.
  if committish.startswith('refs/tags/'):
    remote_ref = committish
    committish = committish[len('refs/tags/'):]
    rev = resolve(remote_ref)
    if rev is None:
      print('repo: error: unknown tag "%s"' % (committish,),
            file=sys.stderr)
      raise CloneFailure()
    return (remote_ref, rev)

  # See if it's a short branch name.
  rev = resolve('refs/remotes/origin/%s' % committish)
  if rev:
    return ('refs/heads/%s' % (committish,), rev)

  # See if it's a tag.
  rev = resolve('refs/tags/%s' % committish)
  if rev:
    return ('refs/tags/%s' % (committish,), rev)

  # See if it's a commit.
  rev = resolve(committish)
  if rev and rev.lower().startswith(committish.lower()):
    return (rev, rev)

  # Give up!
  print('repo: error: unable to resolve "%s"' % (committish,), file=sys.stderr)
  raise CloneFailure()


def verify_rev(cwd, remote_ref, rev, quiet):
  """Verify the commit has been signed by a tag."""
  ret = run_git('describe', rev, cwd=cwd)
  cur = ret.stdout.strip()

  m = re.compile(r'^(.*)-[0-9]{1,}-g[0-9a-f]{1,}$').match(cur)
  if m:
    cur = m.group(1)
    if not quiet:
      print(file=sys.stderr)
      print("warning: '%s' is not signed; falling back to signed release '%s'"
            % (remote_ref, cur), file=sys.stderr)
      print(file=sys.stderr)

  env = os.environ.copy()
  _setenv('GNUPGHOME', gpg_dir, env)
  run_git('tag', '-v', cur, cwd=cwd, env=env)
  return '%s^0' % cur


def _Checkout(cwd, remote_ref, rev, quiet):
  """Checkout an upstream branch into the repository and track it.
  """
  run_git('update-ref', 'refs/heads/default', rev, cwd=cwd)

  _SetConfig(cwd, 'branch.default.remote', 'origin')
  _SetConfig(cwd, 'branch.default.merge', remote_ref)

  run_git('symbolic-ref', 'HEAD', 'refs/heads/default', cwd=cwd)

  cmd = ['read-tree', '--reset', '-u']
  if not quiet:
    cmd.append('-v')
  cmd.append('HEAD')
  run_git(*cmd, cwd=cwd)


def _FindRepo():
  """Look for a repo installation, starting at the current directory.
  """
  curdir = os.getcwd()
  repo = None

  olddir = None
  while curdir != olddir and not repo:
    repo = os.path.join(curdir, repodir, REPO_MAIN)
    if not os.path.isfile(repo):
      repo = None
      olddir = curdir
      curdir = os.path.dirname(curdir)
  return (repo, os.path.join(curdir, repodir))


class _Options(object):
  help = False
  version = False


def _ExpandAlias(name):
  """Look up user registered aliases."""
  # We don't resolve aliases for existing subcommands.  This matches git.
  if name in {'gitc-init', 'help', 'init'}:
    return name, []

  alias = _GetRepoConfig('alias.%s' % (name,))
  if alias is None:
    return name, []

  args = alias.strip().split(' ', 1)
  name = args[0]
  if len(args) == 2:
    args = shlex.split(args[1])
  else:
    args = []
  return name, args


def _ParseArguments(args):
  cmd = None
  opt = _Options()
  arg = []

  for i in range(len(args)):
    a = args[i]
    if a == '-h' or a == '--help':
      opt.help = True
    elif a == '--version':
      opt.version = True
    elif a == '--trace':
      trace.set(True)
    elif not a.startswith('-'):
      cmd = a
      arg = args[i + 1:]
      break
  return cmd, opt, arg


class Requirements(object):
  """Helper for checking repo's system requirements."""

  REQUIREMENTS_NAME = 'requirements.json'

  def __init__(self, requirements):
    """Initialize.

    Args:
      requirements: A dictionary of settings.
    """
    self.requirements = requirements

  @classmethod
  def from_dir(cls, path):
    return cls.from_file(os.path.join(path, cls.REQUIREMENTS_NAME))

  @classmethod
  def from_file(cls, path):
    try:
      with open(path, 'rb') as f:
        data = f.read()
    except EnvironmentError:
      # NB: EnvironmentError is used for Python 2 & 3 compatibility.
      # If we couldn't open the file, assume it's an old source tree.
      return None

    return cls.from_data(data)

  @classmethod
  def from_data(cls, data):
    comment_line = re.compile(br'^ *#')
    strip_data = b''.join(x for x in data.splitlines() if not comment_line.match(x))
    try:
      json_data = json.loads(strip_data)
    except Exception:  # pylint: disable=broad-except
      # If we couldn't parse it, assume it's incompatible.
      return None

    return cls(json_data)

  def _get_soft_ver(self, pkg):
    """Return the soft version for |pkg| if it exists."""
    return self.requirements.get(pkg, {}).get('soft', ())

  def _get_hard_ver(self, pkg):
    """Return the hard version for |pkg| if it exists."""
    return self.requirements.get(pkg, {}).get('hard', ())

  @staticmethod
  def _format_ver(ver):
    """Return a dotted version from |ver|."""
    return '.'.join(str(x) for x in ver)

  def assert_ver(self, pkg, curr_ver):
    """Verify |pkg|'s |curr_ver| is new enough."""
    curr_ver = tuple(curr_ver)
    soft_ver = tuple(self._get_soft_ver(pkg))
    hard_ver = tuple(self._get_hard_ver(pkg))
    if curr_ver < hard_ver:
      print('repo: error: Your version of "%s" (%s) is unsupported; '
            'Please upgrade to at least version %s to continue.' %
            (pkg, self._format_ver(curr_ver), self._format_ver(soft_ver)),
            file=sys.stderr)
      sys.exit(1)

    if curr_ver < soft_ver:
      print('repo: warning: Your version of "%s" (%s) is no longer supported; '
            'Please upgrade to at least version %s to avoid breakage.' %
            (pkg, self._format_ver(curr_ver), self._format_ver(soft_ver)),
            file=sys.stderr)

  def assert_all(self):
    """Assert all of the requirements are satisified."""
    # See if we need a repo launcher upgrade first.
    self.assert_ver('repo', VERSION)

    # Check python before we try to import the repo code.
    self.assert_ver('python', sys.version_info)

    # Check git while we're at it.
    self.assert_ver('git', ParseGitVersion())


def _Usage():
  gitc_usage = ""
  if get_gitc_manifest_dir():
    gitc_usage = "  gitc-init Initialize a GITC Client.\n"

  print(
      """usage: repo COMMAND [ARGS]

repo is not yet installed.  Use "repo init" to install it here.

The most commonly used repo commands are:

  init      Install repo in the current working directory
""" + gitc_usage +
      """  help      Display detailed help on a command

For access to the full online help, install repo ("repo init").
""")
  sys.exit(0)


def _Help(args):
  if args:
    if args[0] in {'init', 'gitc-init'}:
      parser = GetParser(gitc_init=args[0] == 'gitc-init')
      parser.print_help()
      sys.exit(0)
    else:
      print("error: '%s' is not a bootstrap command.\n"
            '        For access to online help, install repo ("repo init").'
            % args[0], file=sys.stderr)
  else:
    _Usage()
  sys.exit(1)


def _Version():
  """Show version information."""
  print('<repo not installed>')
  print('repo launcher version %s' % ('.'.join(str(x) for x in VERSION),))
  print('       (from %s)' % (__file__,))
  print('git %s' % (ParseGitVersion().full,))
  print('Python %s' % sys.version)
  uname = platform.uname()
  if sys.version_info.major < 3:
    # Python 3 returns a named tuple, but Python 2 is simpler.
    print(uname)
  else:
    print('OS %s %s (%s)' % (uname.system, uname.release, uname.version))
    print('CPU %s (%s)' %
          (uname.machine, uname.processor if uname.processor else 'unknown'))
  sys.exit(0)


def _NotInstalled():
  print('error: repo is not installed.  Use "repo init" to install it here.',
        file=sys.stderr)
  sys.exit(1)


def _NoCommands(cmd):
  print("""error: command '%s' requires repo to be installed first.
        Use "repo init" to install it here.""" % cmd, file=sys.stderr)
  sys.exit(1)


def _RunSelf(wrapper_path):
  my_dir = os.path.dirname(wrapper_path)
  my_main = os.path.join(my_dir, 'main.py')
  my_git = os.path.join(my_dir, '.git')

  if os.path.isfile(my_main) and os.path.isdir(my_git):
    for name in ['git_config.py',
                 'project.py',
                 'subcmds']:
      if not os.path.exists(os.path.join(my_dir, name)):
        return None, None
    return my_main, my_git
  return None, None


def _SetDefaultsTo(gitdir):
  global REPO_URL
  global REPO_REV

  REPO_URL = gitdir
  ret = run_git('--git-dir=%s' % gitdir, 'symbolic-ref', 'HEAD', check=False)
  if ret.returncode:
    # If we're not tracking a branch (bisect/etc...), then fall back to commit.
    print('repo: warning: %s has no current branch; using HEAD' % gitdir,
          file=sys.stderr)
    try:
      ret = run_git('rev-parse', 'HEAD', cwd=gitdir)
    except CloneFailure:
      print('fatal: %s has invalid HEAD' % gitdir, file=sys.stderr)
      sys.exit(1)

  REPO_REV = ret.stdout.strip()


def main(orig_args):
  cmd, opt, args = _ParseArguments(orig_args)

  # We run this early as we run some git commands ourselves.
  SetGitTrace2ParentSid()

  repo_main, rel_repo_dir = None, None
  # Don't use the local repo copy, make sure to switch to the gitc client first.
  if cmd != 'gitc-init':
    repo_main, rel_repo_dir = _FindRepo()

  wrapper_path = os.path.abspath(__file__)
  my_main, my_git = _RunSelf(wrapper_path)

  cwd = os.getcwd()
  if get_gitc_manifest_dir() and cwd.startswith(get_gitc_manifest_dir()):
    print('error: repo cannot be used in the GITC local manifest directory.'
          '\nIf you want to work on this GITC client please rerun this '
          'command from the corresponding client under /gitc/',
          file=sys.stderr)
    sys.exit(1)
  if not repo_main:
    # Only expand aliases here since we'll be parsing the CLI ourselves.
    # If we had repo_main, alias expansion would happen in main.py.
    cmd, alias_args = _ExpandAlias(cmd)
    args = alias_args + args

    if opt.help:
      _Usage()
    if cmd == 'help':
      _Help(args)
    if opt.version or cmd == 'version':
      _Version()
    if not cmd:
      _NotInstalled()
    if cmd == 'init' or cmd == 'gitc-init':
      if my_git:
        _SetDefaultsTo(my_git)
      try:
        _Init(args, gitc_init=(cmd == 'gitc-init'))
      except CloneFailure:
        path = os.path.join(repodir, S_repo)
        print("fatal: cloning the git-repo repository failed, will remove "
              "'%s' " % path, file=sys.stderr)
        shutil.rmtree(path, ignore_errors=True)
        sys.exit(1)
      repo_main, rel_repo_dir = _FindRepo()
    else:
      _NoCommands(cmd)

  if my_main:
    repo_main = my_main

  if not repo_main:
    print("fatal: unable to find repo entry point", file=sys.stderr)
    sys.exit(1)

  reqs = Requirements.from_dir(os.path.dirname(repo_main))
  if reqs:
    reqs.assert_all()

  ver_str = '.'.join(map(str, VERSION))
  me = [sys.executable, repo_main,
        '--repo-dir=%s' % rel_repo_dir,
        '--wrapper-version=%s' % ver_str,
        '--wrapper-path=%s' % wrapper_path,
        '--']
  me.extend(orig_args)
  exec_command(me)
  print("fatal: unable to start %s" % repo_main, file=sys.stderr)
  sys.exit(148)


if __name__ == '__main__':
  main(sys.argv[1:])
